// Models.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

protocol JSONEncodable {
    func encodeToJSON() -> AnyObject
}

public enum ErrorResponse : ErrorType {
    case Error(Int, NSData?, ErrorType)
}

public class Response<T> {
    public let statusCode: Int
    public let header: [String: String]
    public let body: T?

    public init(statusCode: Int, header: [String: String], body: T?) {
        self.statusCode = statusCode
        self.header = header
        self.body = body
    }

    public convenience init(response: NSHTTPURLResponse, body: T?) {
        let rawHeader = response.allHeaderFields
        var header = [String:String]()
        for case let (key, value) as (String, String) in rawHeader {
            header[key] = value
        }
        self.init(statusCode: response.statusCode, header: header, body: body)
    }
}

private var once = dispatch_once_t()
class Decoders {
    static private var decoders = Dictionary<String, ((AnyObject) -> AnyObject)>()

    static func addDecoder<T>(clazz clazz: T.Type, decoder: ((AnyObject) -> T)) {
        let key = "\(T.self)"
        decoders[key] = { decoder($0) as! AnyObject }
    }

    static func decode<T>(clazz clazz: [T].Type, source: AnyObject) -> [T] {
        let array = source as! [AnyObject]
        return array.map { Decoders.decode(clazz: T.self, source: $0) }
    }

    static func decode<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject) -> [Key:T] {
        let sourceDictionary = source as! [Key: AnyObject]
        var dictionary = [Key:T]()
        for (key, value) in sourceDictionary {
            dictionary[key] = Decoders.decode(clazz: T.self, source: value)
        }
        return dictionary
    }

    static func decode<T>(clazz clazz: T.Type, source: AnyObject) -> T {
        initialize()
        if T.self is Int32.Type && source is NSNumber {
            return source.intValue as! T;
        }
        if T.self is Int64.Type && source is NSNumber {
            return source.longLongValue as! T;
        }
        if T.self is NSUUID.Type && source is String {
            return NSUUID(UUIDString: source as! String) as! T
        }
        if source is T {
            return source as! T
        }
        if T.self is NSData.Type && source is String {
            return NSData(base64EncodedString: source as! String, options: NSDataBase64DecodingOptions()) as! T
        }

        let key = "\(T.self)"
        if let decoder = decoders[key] {
           return decoder(source) as! T
        } else {
            fatalError("Source \(source) is not convertible to type \(clazz): Maybe swagger file is insufficient")
        }
    }

    static func decodeOptional<T>(clazz clazz: T.Type, source: AnyObject?) -> T? {
        if source is NSNull {
            return nil
        }
        return source.map { (source: AnyObject) -> T in
            Decoders.decode(clazz: clazz, source: source)
        }
    }

    static func decodeOptional<T>(clazz clazz: [T].Type, source: AnyObject?) -> [T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static func decodeOptional<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject?) -> [Key:T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [Key:T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static private func initialize() {
        dispatch_once(&once) {
            let formatters = [
                "yyyy-MM-dd",
                "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss'Z'",
                "yyyy-MM-dd'T'HH:mm:ss.SSS"
            ].map { (format: String) -> NSDateFormatter in
                let formatter = NSDateFormatter()
                formatter.locale = NSLocale(localeIdentifier:"en_US_POSIX")
                formatter.dateFormat = format
                return formatter
            }
            // Decoder for NSDate
            Decoders.addDecoder(clazz: NSDate.self) { (source: AnyObject) -> NSDate in
               if let sourceString = source as? String {
                    for formatter in formatters {
                        if let date = formatter.dateFromString(sourceString) {
                            return date
                        }
                    }

                }
                if let sourceInt = source as? Int {
                    // treat as a java date
                    return NSDate(timeIntervalSince1970: Double(sourceInt / 1000) )
                }
                fatalError("formatter failed to parse \(source)")
            }

            // Decoder for ISOFullDate
            Decoders.addDecoder(clazz: ISOFullDate.self, decoder: { (source: AnyObject) -> ISOFullDate in
                if let string = source as? String,
                   let isoDate = ISOFullDate.from(string: string) {
                    return isoDate
                }
                fatalError("formatter failed to parse \(source)")
            }) 

            // Decoder for [AboutApi]
            Decoders.addDecoder(clazz: [AboutApi].self) { (source: AnyObject) -> [AboutApi] in
                return Decoders.decode(clazz: [AboutApi].self, source: source)
            }
            // Decoder for AboutApi
            Decoders.addDecoder(clazz: AboutApi.self) { (source: AnyObject) -> AboutApi in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = AboutApi()
                instance.platform = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["platform"])
                instance.sempVersion = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sempVersion"])
                return instance
            }


            // Decoder for [AboutApiLinks]
            Decoders.addDecoder(clazz: [AboutApiLinks].self) { (source: AnyObject) -> [AboutApiLinks] in
                return Decoders.decode(clazz: [AboutApiLinks].self, source: source)
            }
            // Decoder for AboutApiLinks
            Decoders.addDecoder(clazz: AboutApiLinks.self) { (source: AnyObject) -> AboutApiLinks in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = AboutApiLinks()
                instance.uri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["uri"])
                return instance
            }


            // Decoder for [AboutApiResponse]
            Decoders.addDecoder(clazz: [AboutApiResponse].self) { (source: AnyObject) -> [AboutApiResponse] in
                return Decoders.decode(clazz: [AboutApiResponse].self, source: source)
            }
            // Decoder for AboutApiResponse
            Decoders.addDecoder(clazz: AboutApiResponse.self) { (source: AnyObject) -> AboutApiResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = AboutApiResponse()
                instance.data = Decoders.decodeOptional(clazz: AboutApi.self, source: sourceDictionary["data"])
                instance.links = Decoders.decodeOptional(clazz: AboutApiLinks.self, source: sourceDictionary["links"])
                instance.meta = Decoders.decodeOptional(clazz: SempMeta.self, source: sourceDictionary["meta"])
                return instance
            }


            // Decoder for [AboutUser]
            Decoders.addDecoder(clazz: [AboutUser].self) { (source: AnyObject) -> [AboutUser] in
                return Decoders.decode(clazz: [AboutUser].self, source: source)
            }
            // Decoder for AboutUser
            Decoders.addDecoder(clazz: AboutUser.self) { (source: AnyObject) -> AboutUser in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = AboutUser()
                instance.globalAccessLevel = AboutUser.GlobalAccessLevel(rawValue: (sourceDictionary["globalAccessLevel"] as? String) ?? "") 
                return instance
            }


            // Decoder for [AboutUserLinks]
            Decoders.addDecoder(clazz: [AboutUserLinks].self) { (source: AnyObject) -> [AboutUserLinks] in
                return Decoders.decode(clazz: [AboutUserLinks].self, source: source)
            }
            // Decoder for AboutUserLinks
            Decoders.addDecoder(clazz: AboutUserLinks.self) { (source: AnyObject) -> AboutUserLinks in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = AboutUserLinks()
                instance.msgVpnsUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["msgVpnsUri"])
                instance.uri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["uri"])
                return instance
            }


            // Decoder for [AboutUserMsgVpn]
            Decoders.addDecoder(clazz: [AboutUserMsgVpn].self) { (source: AnyObject) -> [AboutUserMsgVpn] in
                return Decoders.decode(clazz: [AboutUserMsgVpn].self, source: source)
            }
            // Decoder for AboutUserMsgVpn
            Decoders.addDecoder(clazz: AboutUserMsgVpn.self) { (source: AnyObject) -> AboutUserMsgVpn in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = AboutUserMsgVpn()
                instance.accessLevel = AboutUserMsgVpn.AccessLevel(rawValue: (sourceDictionary["accessLevel"] as? String) ?? "") 
                instance.msgVpnName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["msgVpnName"])
                return instance
            }


            // Decoder for [AboutUserMsgVpnLinks]
            Decoders.addDecoder(clazz: [AboutUserMsgVpnLinks].self) { (source: AnyObject) -> [AboutUserMsgVpnLinks] in
                return Decoders.decode(clazz: [AboutUserMsgVpnLinks].self, source: source)
            }
            // Decoder for AboutUserMsgVpnLinks
            Decoders.addDecoder(clazz: AboutUserMsgVpnLinks.self) { (source: AnyObject) -> AboutUserMsgVpnLinks in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = AboutUserMsgVpnLinks()
                instance.uri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["uri"])
                return instance
            }


            // Decoder for [AboutUserMsgVpnResponse]
            Decoders.addDecoder(clazz: [AboutUserMsgVpnResponse].self) { (source: AnyObject) -> [AboutUserMsgVpnResponse] in
                return Decoders.decode(clazz: [AboutUserMsgVpnResponse].self, source: source)
            }
            // Decoder for AboutUserMsgVpnResponse
            Decoders.addDecoder(clazz: AboutUserMsgVpnResponse.self) { (source: AnyObject) -> AboutUserMsgVpnResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = AboutUserMsgVpnResponse()
                instance.data = Decoders.decodeOptional(clazz: AboutUserMsgVpn.self, source: sourceDictionary["data"])
                instance.links = Decoders.decodeOptional(clazz: AboutUserMsgVpnLinks.self, source: sourceDictionary["links"])
                instance.meta = Decoders.decodeOptional(clazz: SempMeta.self, source: sourceDictionary["meta"])
                return instance
            }


            // Decoder for [AboutUserMsgVpnsResponse]
            Decoders.addDecoder(clazz: [AboutUserMsgVpnsResponse].self) { (source: AnyObject) -> [AboutUserMsgVpnsResponse] in
                return Decoders.decode(clazz: [AboutUserMsgVpnsResponse].self, source: source)
            }
            // Decoder for AboutUserMsgVpnsResponse
            Decoders.addDecoder(clazz: AboutUserMsgVpnsResponse.self) { (source: AnyObject) -> AboutUserMsgVpnsResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = AboutUserMsgVpnsResponse()
                instance.data = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["data"])
                instance.links = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["links"])
                instance.meta = Decoders.decodeOptional(clazz: SempMeta.self, source: sourceDictionary["meta"])
                return instance
            }


            // Decoder for [AboutUserResponse]
            Decoders.addDecoder(clazz: [AboutUserResponse].self) { (source: AnyObject) -> [AboutUserResponse] in
                return Decoders.decode(clazz: [AboutUserResponse].self, source: source)
            }
            // Decoder for AboutUserResponse
            Decoders.addDecoder(clazz: AboutUserResponse.self) { (source: AnyObject) -> AboutUserResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = AboutUserResponse()
                instance.data = Decoders.decodeOptional(clazz: AboutUser.self, source: sourceDictionary["data"])
                instance.links = Decoders.decodeOptional(clazz: AboutUserLinks.self, source: sourceDictionary["links"])
                instance.meta = Decoders.decodeOptional(clazz: SempMeta.self, source: sourceDictionary["meta"])
                return instance
            }


            // Decoder for [EventThreshold]
            Decoders.addDecoder(clazz: [EventThreshold].self) { (source: AnyObject) -> [EventThreshold] in
                return Decoders.decode(clazz: [EventThreshold].self, source: source)
            }
            // Decoder for EventThreshold
            Decoders.addDecoder(clazz: EventThreshold.self) { (source: AnyObject) -> EventThreshold in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = EventThreshold()
                instance.clearPercent = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["clearPercent"])
                instance.clearValue = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["clearValue"])
                instance.setPercent = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["setPercent"])
                instance.setValue = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["setValue"])
                return instance
            }


            // Decoder for [EventThresholdByPercent]
            Decoders.addDecoder(clazz: [EventThresholdByPercent].self) { (source: AnyObject) -> [EventThresholdByPercent] in
                return Decoders.decode(clazz: [EventThresholdByPercent].self, source: source)
            }
            // Decoder for EventThresholdByPercent
            Decoders.addDecoder(clazz: EventThresholdByPercent.self) { (source: AnyObject) -> EventThresholdByPercent in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = EventThresholdByPercent()
                instance.clearPercent = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["clearPercent"])
                instance.setPercent = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["setPercent"])
                return instance
            }


            // Decoder for [EventThresholdByValue]
            Decoders.addDecoder(clazz: [EventThresholdByValue].self) { (source: AnyObject) -> [EventThresholdByValue] in
                return Decoders.decode(clazz: [EventThresholdByValue].self, source: source)
            }
            // Decoder for EventThresholdByValue
            Decoders.addDecoder(clazz: EventThresholdByValue.self) { (source: AnyObject) -> EventThresholdByValue in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = EventThresholdByValue()
                instance.clearValue = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["clearValue"])
                instance.setValue = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["setValue"])
                return instance
            }


            // Decoder for [MsgVpn]
            Decoders.addDecoder(clazz: [MsgVpn].self) { (source: AnyObject) -> [MsgVpn] in
                return Decoders.decode(clazz: [MsgVpn].self, source: source)
            }
            // Decoder for MsgVpn
            Decoders.addDecoder(clazz: MsgVpn.self) { (source: AnyObject) -> MsgVpn in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpn()
                instance.authenticationBasicEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["authenticationBasicEnabled"])
                instance.authenticationBasicProfileName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["authenticationBasicProfileName"])
                instance.authenticationBasicRadiusDomain = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["authenticationBasicRadiusDomain"])
                instance.authenticationBasicType = MsgVpn.AuthenticationBasicType(rawValue: (sourceDictionary["authenticationBasicType"] as? String) ?? "") 
                instance.authenticationClientCertAllowApiProvidedUsernameEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["authenticationClientCertAllowApiProvidedUsernameEnabled"])
                instance.authenticationClientCertEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["authenticationClientCertEnabled"])
                instance.authenticationClientCertMaxChainDepth = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["authenticationClientCertMaxChainDepth"])
                instance.authenticationClientCertRevocationCheckMode = MsgVpn.AuthenticationClientCertRevocationCheckMode(rawValue: (sourceDictionary["authenticationClientCertRevocationCheckMode"] as? String) ?? "") 
                instance.authenticationClientCertUsernameSource = MsgVpn.AuthenticationClientCertUsernameSource(rawValue: (sourceDictionary["authenticationClientCertUsernameSource"] as? String) ?? "") 
                instance.authenticationClientCertValidateDateEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["authenticationClientCertValidateDateEnabled"])
                instance.authenticationKerberosAllowApiProvidedUsernameEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["authenticationKerberosAllowApiProvidedUsernameEnabled"])
                instance.authenticationKerberosEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["authenticationKerberosEnabled"])
                instance.authorizationLdapGroupMembershipAttributeName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["authorizationLdapGroupMembershipAttributeName"])
                instance.authorizationProfileName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["authorizationProfileName"])
                instance.authorizationType = MsgVpn.AuthorizationType(rawValue: (sourceDictionary["authorizationType"] as? String) ?? "") 
                instance.bridgingTlsServerCertEnforceTrustedCommonNameEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["bridgingTlsServerCertEnforceTrustedCommonNameEnabled"])
                instance.bridgingTlsServerCertMaxChainDepth = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["bridgingTlsServerCertMaxChainDepth"])
                instance.bridgingTlsServerCertValidateDateEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["bridgingTlsServerCertValidateDateEnabled"])
                instance.distributedCacheManagementEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["distributedCacheManagementEnabled"])
                instance.enabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["enabled"])
                instance.eventConnectionCountThreshold = Decoders.decodeOptional(clazz: EventThreshold.self, source: sourceDictionary["eventConnectionCountThreshold"])
                instance.eventEgressFlowCountThreshold = Decoders.decodeOptional(clazz: EventThreshold.self, source: sourceDictionary["eventEgressFlowCountThreshold"])
                instance.eventEgressMsgRateThreshold = Decoders.decodeOptional(clazz: EventThresholdByValue.self, source: sourceDictionary["eventEgressMsgRateThreshold"])
                instance.eventEndpointCountThreshold = Decoders.decodeOptional(clazz: EventThreshold.self, source: sourceDictionary["eventEndpointCountThreshold"])
                instance.eventIngressFlowCountThreshold = Decoders.decodeOptional(clazz: EventThreshold.self, source: sourceDictionary["eventIngressFlowCountThreshold"])
                instance.eventIngressMsgRateThreshold = Decoders.decodeOptional(clazz: EventThresholdByValue.self, source: sourceDictionary["eventIngressMsgRateThreshold"])
                instance.eventLargeMsgThreshold = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["eventLargeMsgThreshold"])
                instance.eventLogTag = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["eventLogTag"])
                instance.eventMsgSpoolUsageThreshold = Decoders.decodeOptional(clazz: EventThreshold.self, source: sourceDictionary["eventMsgSpoolUsageThreshold"])
                instance.eventPublishClientEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["eventPublishClientEnabled"])
                instance.eventPublishMsgVpnEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["eventPublishMsgVpnEnabled"])
                instance.eventPublishSubscriptionMode = MsgVpn.EventPublishSubscriptionMode(rawValue: (sourceDictionary["eventPublishSubscriptionMode"] as? String) ?? "") 
                instance.eventPublishTopicFormatMqttEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["eventPublishTopicFormatMqttEnabled"])
                instance.eventPublishTopicFormatSmfEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["eventPublishTopicFormatSmfEnabled"])
                instance.eventServiceAmqpConnectionCountThreshold = Decoders.decodeOptional(clazz: EventThreshold.self, source: sourceDictionary["eventServiceAmqpConnectionCountThreshold"])
                instance.eventServiceMqttConnectionCountThreshold = Decoders.decodeOptional(clazz: EventThreshold.self, source: sourceDictionary["eventServiceMqttConnectionCountThreshold"])
                instance.eventServiceRestIncomingConnectionCountThreshold = Decoders.decodeOptional(clazz: EventThreshold.self, source: sourceDictionary["eventServiceRestIncomingConnectionCountThreshold"])
                instance.eventServiceSmfConnectionCountThreshold = Decoders.decodeOptional(clazz: EventThreshold.self, source: sourceDictionary["eventServiceSmfConnectionCountThreshold"])
                instance.eventServiceWebConnectionCountThreshold = Decoders.decodeOptional(clazz: EventThreshold.self, source: sourceDictionary["eventServiceWebConnectionCountThreshold"])
                instance.eventSubscriptionCountThreshold = Decoders.decodeOptional(clazz: EventThreshold.self, source: sourceDictionary["eventSubscriptionCountThreshold"])
                instance.eventTransactedSessionCountThreshold = Decoders.decodeOptional(clazz: EventThreshold.self, source: sourceDictionary["eventTransactedSessionCountThreshold"])
                instance.eventTransactionCountThreshold = Decoders.decodeOptional(clazz: EventThreshold.self, source: sourceDictionary["eventTransactionCountThreshold"])
                instance.exportSubscriptionsEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["exportSubscriptionsEnabled"])
                instance.jndiEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["jndiEnabled"])
                instance.maxConnectionCount = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["maxConnectionCount"])
                instance.maxEgressFlowCount = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["maxEgressFlowCount"])
                instance.maxEndpointCount = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["maxEndpointCount"])
                instance.maxIngressFlowCount = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["maxIngressFlowCount"])
                instance.maxMsgSpoolUsage = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["maxMsgSpoolUsage"])
                instance.maxSubscriptionCount = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["maxSubscriptionCount"])
                instance.maxTransactedSessionCount = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["maxTransactedSessionCount"])
                instance.maxTransactionCount = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["maxTransactionCount"])
                instance.msgVpnName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["msgVpnName"])
                instance.replicationAckPropagationIntervalMsgCount = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["replicationAckPropagationIntervalMsgCount"])
                instance.replicationBridgeAuthenticationBasicClientUsername = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["replicationBridgeAuthenticationBasicClientUsername"])
                instance.replicationBridgeAuthenticationBasicPassword = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["replicationBridgeAuthenticationBasicPassword"])
                instance.replicationBridgeAuthenticationClientCertContent = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["replicationBridgeAuthenticationClientCertContent"])
                instance.replicationBridgeAuthenticationClientCertPassword = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["replicationBridgeAuthenticationClientCertPassword"])
                instance.replicationBridgeAuthenticationScheme = MsgVpn.ReplicationBridgeAuthenticationScheme(rawValue: (sourceDictionary["replicationBridgeAuthenticationScheme"] as? String) ?? "") 
                instance.replicationBridgeCompressedDataEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["replicationBridgeCompressedDataEnabled"])
                instance.replicationBridgeEgressFlowWindowSize = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["replicationBridgeEgressFlowWindowSize"])
                instance.replicationBridgeRetryDelay = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["replicationBridgeRetryDelay"])
                instance.replicationBridgeTlsEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["replicationBridgeTlsEnabled"])
                instance.replicationBridgeUnidirectionalClientProfileName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["replicationBridgeUnidirectionalClientProfileName"])
                instance.replicationEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["replicationEnabled"])
                instance.replicationEnabledQueueBehavior = MsgVpn.ReplicationEnabledQueueBehavior(rawValue: (sourceDictionary["replicationEnabledQueueBehavior"] as? String) ?? "") 
                instance.replicationQueueMaxMsgSpoolUsage = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["replicationQueueMaxMsgSpoolUsage"])
                instance.replicationQueueRejectMsgToSenderOnDiscardEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["replicationQueueRejectMsgToSenderOnDiscardEnabled"])
                instance.replicationRejectMsgWhenSyncIneligibleEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["replicationRejectMsgWhenSyncIneligibleEnabled"])
                instance.replicationRole = MsgVpn.ReplicationRole(rawValue: (sourceDictionary["replicationRole"] as? String) ?? "") 
                instance.replicationTransactionMode = MsgVpn.ReplicationTransactionMode(rawValue: (sourceDictionary["replicationTransactionMode"] as? String) ?? "") 
                instance.restTlsServerCertEnforceTrustedCommonNameEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["restTlsServerCertEnforceTrustedCommonNameEnabled"])
                instance.restTlsServerCertMaxChainDepth = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["restTlsServerCertMaxChainDepth"])
                instance.restTlsServerCertValidateDateEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["restTlsServerCertValidateDateEnabled"])
                instance.sempOverMsgBusAdminClientEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["sempOverMsgBusAdminClientEnabled"])
                instance.sempOverMsgBusAdminDistributedCacheEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["sempOverMsgBusAdminDistributedCacheEnabled"])
                instance.sempOverMsgBusAdminEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["sempOverMsgBusAdminEnabled"])
                instance.sempOverMsgBusEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["sempOverMsgBusEnabled"])
                instance.sempOverMsgBusShowEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["sempOverMsgBusShowEnabled"])
                instance.serviceAmqpMaxConnectionCount = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["serviceAmqpMaxConnectionCount"])
                instance.serviceAmqpPlainTextEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["serviceAmqpPlainTextEnabled"])
                instance.serviceAmqpPlainTextListenPort = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["serviceAmqpPlainTextListenPort"])
                instance.serviceAmqpTlsEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["serviceAmqpTlsEnabled"])
                instance.serviceAmqpTlsListenPort = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["serviceAmqpTlsListenPort"])
                instance.serviceMqttMaxConnectionCount = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["serviceMqttMaxConnectionCount"])
                instance.serviceMqttPlainTextEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["serviceMqttPlainTextEnabled"])
                instance.serviceMqttPlainTextListenPort = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["serviceMqttPlainTextListenPort"])
                instance.serviceMqttTlsEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["serviceMqttTlsEnabled"])
                instance.serviceMqttTlsListenPort = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["serviceMqttTlsListenPort"])
                instance.serviceMqttTlsWebSocketEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["serviceMqttTlsWebSocketEnabled"])
                instance.serviceMqttTlsWebSocketListenPort = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["serviceMqttTlsWebSocketListenPort"])
                instance.serviceMqttWebSocketEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["serviceMqttWebSocketEnabled"])
                instance.serviceMqttWebSocketListenPort = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["serviceMqttWebSocketListenPort"])
                instance.serviceRestIncomingMaxConnectionCount = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["serviceRestIncomingMaxConnectionCount"])
                instance.serviceRestIncomingPlainTextEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["serviceRestIncomingPlainTextEnabled"])
                instance.serviceRestIncomingPlainTextListenPort = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["serviceRestIncomingPlainTextListenPort"])
                instance.serviceRestIncomingTlsEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["serviceRestIncomingTlsEnabled"])
                instance.serviceRestIncomingTlsListenPort = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["serviceRestIncomingTlsListenPort"])
                instance.serviceRestMode = MsgVpn.ServiceRestMode(rawValue: (sourceDictionary["serviceRestMode"] as? String) ?? "") 
                instance.serviceRestOutgoingMaxConnectionCount = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["serviceRestOutgoingMaxConnectionCount"])
                instance.serviceSmfMaxConnectionCount = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["serviceSmfMaxConnectionCount"])
                instance.serviceSmfPlainTextEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["serviceSmfPlainTextEnabled"])
                instance.serviceSmfTlsEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["serviceSmfTlsEnabled"])
                instance.serviceWebMaxConnectionCount = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["serviceWebMaxConnectionCount"])
                instance.serviceWebPlainTextEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["serviceWebPlainTextEnabled"])
                instance.serviceWebTlsEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["serviceWebTlsEnabled"])
                instance.tlsAllowDowngradeToPlainTextEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["tlsAllowDowngradeToPlainTextEnabled"])
                return instance
            }


            // Decoder for [MsgVpnAclProfile]
            Decoders.addDecoder(clazz: [MsgVpnAclProfile].self) { (source: AnyObject) -> [MsgVpnAclProfile] in
                return Decoders.decode(clazz: [MsgVpnAclProfile].self, source: source)
            }
            // Decoder for MsgVpnAclProfile
            Decoders.addDecoder(clazz: MsgVpnAclProfile.self) { (source: AnyObject) -> MsgVpnAclProfile in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnAclProfile()
                instance.aclProfileName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["aclProfileName"])
                instance.clientConnectDefaultAction = MsgVpnAclProfile.ClientConnectDefaultAction(rawValue: (sourceDictionary["clientConnectDefaultAction"] as? String) ?? "") 
                instance.msgVpnName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["msgVpnName"])
                instance.publishTopicDefaultAction = MsgVpnAclProfile.PublishTopicDefaultAction(rawValue: (sourceDictionary["publishTopicDefaultAction"] as? String) ?? "") 
                instance.subscribeTopicDefaultAction = MsgVpnAclProfile.SubscribeTopicDefaultAction(rawValue: (sourceDictionary["subscribeTopicDefaultAction"] as? String) ?? "") 
                return instance
            }


            // Decoder for [MsgVpnAclProfileClientConnectException]
            Decoders.addDecoder(clazz: [MsgVpnAclProfileClientConnectException].self) { (source: AnyObject) -> [MsgVpnAclProfileClientConnectException] in
                return Decoders.decode(clazz: [MsgVpnAclProfileClientConnectException].self, source: source)
            }
            // Decoder for MsgVpnAclProfileClientConnectException
            Decoders.addDecoder(clazz: MsgVpnAclProfileClientConnectException.self) { (source: AnyObject) -> MsgVpnAclProfileClientConnectException in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnAclProfileClientConnectException()
                instance.aclProfileName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["aclProfileName"])
                instance.clientConnectExceptionAddress = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["clientConnectExceptionAddress"])
                instance.msgVpnName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["msgVpnName"])
                return instance
            }


            // Decoder for [MsgVpnAclProfileClientConnectExceptionLinks]
            Decoders.addDecoder(clazz: [MsgVpnAclProfileClientConnectExceptionLinks].self) { (source: AnyObject) -> [MsgVpnAclProfileClientConnectExceptionLinks] in
                return Decoders.decode(clazz: [MsgVpnAclProfileClientConnectExceptionLinks].self, source: source)
            }
            // Decoder for MsgVpnAclProfileClientConnectExceptionLinks
            Decoders.addDecoder(clazz: MsgVpnAclProfileClientConnectExceptionLinks.self) { (source: AnyObject) -> MsgVpnAclProfileClientConnectExceptionLinks in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnAclProfileClientConnectExceptionLinks()
                instance.uri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["uri"])
                return instance
            }


            // Decoder for [MsgVpnAclProfileClientConnectExceptionResponse]
            Decoders.addDecoder(clazz: [MsgVpnAclProfileClientConnectExceptionResponse].self) { (source: AnyObject) -> [MsgVpnAclProfileClientConnectExceptionResponse] in
                return Decoders.decode(clazz: [MsgVpnAclProfileClientConnectExceptionResponse].self, source: source)
            }
            // Decoder for MsgVpnAclProfileClientConnectExceptionResponse
            Decoders.addDecoder(clazz: MsgVpnAclProfileClientConnectExceptionResponse.self) { (source: AnyObject) -> MsgVpnAclProfileClientConnectExceptionResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnAclProfileClientConnectExceptionResponse()
                instance.data = Decoders.decodeOptional(clazz: MsgVpnAclProfileClientConnectException.self, source: sourceDictionary["data"])
                instance.links = Decoders.decodeOptional(clazz: MsgVpnAclProfileClientConnectExceptionLinks.self, source: sourceDictionary["links"])
                instance.meta = Decoders.decodeOptional(clazz: SempMeta.self, source: sourceDictionary["meta"])
                return instance
            }


            // Decoder for [MsgVpnAclProfileClientConnectExceptionsResponse]
            Decoders.addDecoder(clazz: [MsgVpnAclProfileClientConnectExceptionsResponse].self) { (source: AnyObject) -> [MsgVpnAclProfileClientConnectExceptionsResponse] in
                return Decoders.decode(clazz: [MsgVpnAclProfileClientConnectExceptionsResponse].self, source: source)
            }
            // Decoder for MsgVpnAclProfileClientConnectExceptionsResponse
            Decoders.addDecoder(clazz: MsgVpnAclProfileClientConnectExceptionsResponse.self) { (source: AnyObject) -> MsgVpnAclProfileClientConnectExceptionsResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnAclProfileClientConnectExceptionsResponse()
                instance.data = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["data"])
                instance.links = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["links"])
                instance.meta = Decoders.decodeOptional(clazz: SempMeta.self, source: sourceDictionary["meta"])
                return instance
            }


            // Decoder for [MsgVpnAclProfileLinks]
            Decoders.addDecoder(clazz: [MsgVpnAclProfileLinks].self) { (source: AnyObject) -> [MsgVpnAclProfileLinks] in
                return Decoders.decode(clazz: [MsgVpnAclProfileLinks].self, source: source)
            }
            // Decoder for MsgVpnAclProfileLinks
            Decoders.addDecoder(clazz: MsgVpnAclProfileLinks.self) { (source: AnyObject) -> MsgVpnAclProfileLinks in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnAclProfileLinks()
                instance.clientConnectExceptionsUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["clientConnectExceptionsUri"])
                instance.publishExceptionsUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["publishExceptionsUri"])
                instance.subscribeExceptionsUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["subscribeExceptionsUri"])
                instance.uri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["uri"])
                return instance
            }


            // Decoder for [MsgVpnAclProfilePublishException]
            Decoders.addDecoder(clazz: [MsgVpnAclProfilePublishException].self) { (source: AnyObject) -> [MsgVpnAclProfilePublishException] in
                return Decoders.decode(clazz: [MsgVpnAclProfilePublishException].self, source: source)
            }
            // Decoder for MsgVpnAclProfilePublishException
            Decoders.addDecoder(clazz: MsgVpnAclProfilePublishException.self) { (source: AnyObject) -> MsgVpnAclProfilePublishException in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnAclProfilePublishException()
                instance.aclProfileName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["aclProfileName"])
                instance.msgVpnName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["msgVpnName"])
                instance.publishExceptionTopic = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["publishExceptionTopic"])
                instance.topicSyntax = MsgVpnAclProfilePublishException.TopicSyntax(rawValue: (sourceDictionary["topicSyntax"] as? String) ?? "") 
                return instance
            }


            // Decoder for [MsgVpnAclProfilePublishExceptionLinks]
            Decoders.addDecoder(clazz: [MsgVpnAclProfilePublishExceptionLinks].self) { (source: AnyObject) -> [MsgVpnAclProfilePublishExceptionLinks] in
                return Decoders.decode(clazz: [MsgVpnAclProfilePublishExceptionLinks].self, source: source)
            }
            // Decoder for MsgVpnAclProfilePublishExceptionLinks
            Decoders.addDecoder(clazz: MsgVpnAclProfilePublishExceptionLinks.self) { (source: AnyObject) -> MsgVpnAclProfilePublishExceptionLinks in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnAclProfilePublishExceptionLinks()
                instance.uri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["uri"])
                return instance
            }


            // Decoder for [MsgVpnAclProfilePublishExceptionResponse]
            Decoders.addDecoder(clazz: [MsgVpnAclProfilePublishExceptionResponse].self) { (source: AnyObject) -> [MsgVpnAclProfilePublishExceptionResponse] in
                return Decoders.decode(clazz: [MsgVpnAclProfilePublishExceptionResponse].self, source: source)
            }
            // Decoder for MsgVpnAclProfilePublishExceptionResponse
            Decoders.addDecoder(clazz: MsgVpnAclProfilePublishExceptionResponse.self) { (source: AnyObject) -> MsgVpnAclProfilePublishExceptionResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnAclProfilePublishExceptionResponse()
                instance.data = Decoders.decodeOptional(clazz: MsgVpnAclProfilePublishException.self, source: sourceDictionary["data"])
                instance.links = Decoders.decodeOptional(clazz: MsgVpnAclProfilePublishExceptionLinks.self, source: sourceDictionary["links"])
                instance.meta = Decoders.decodeOptional(clazz: SempMeta.self, source: sourceDictionary["meta"])
                return instance
            }


            // Decoder for [MsgVpnAclProfilePublishExceptionsResponse]
            Decoders.addDecoder(clazz: [MsgVpnAclProfilePublishExceptionsResponse].self) { (source: AnyObject) -> [MsgVpnAclProfilePublishExceptionsResponse] in
                return Decoders.decode(clazz: [MsgVpnAclProfilePublishExceptionsResponse].self, source: source)
            }
            // Decoder for MsgVpnAclProfilePublishExceptionsResponse
            Decoders.addDecoder(clazz: MsgVpnAclProfilePublishExceptionsResponse.self) { (source: AnyObject) -> MsgVpnAclProfilePublishExceptionsResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnAclProfilePublishExceptionsResponse()
                instance.data = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["data"])
                instance.links = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["links"])
                instance.meta = Decoders.decodeOptional(clazz: SempMeta.self, source: sourceDictionary["meta"])
                return instance
            }


            // Decoder for [MsgVpnAclProfileResponse]
            Decoders.addDecoder(clazz: [MsgVpnAclProfileResponse].self) { (source: AnyObject) -> [MsgVpnAclProfileResponse] in
                return Decoders.decode(clazz: [MsgVpnAclProfileResponse].self, source: source)
            }
            // Decoder for MsgVpnAclProfileResponse
            Decoders.addDecoder(clazz: MsgVpnAclProfileResponse.self) { (source: AnyObject) -> MsgVpnAclProfileResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnAclProfileResponse()
                instance.data = Decoders.decodeOptional(clazz: MsgVpnAclProfile.self, source: sourceDictionary["data"])
                instance.links = Decoders.decodeOptional(clazz: MsgVpnAclProfileLinks.self, source: sourceDictionary["links"])
                instance.meta = Decoders.decodeOptional(clazz: SempMeta.self, source: sourceDictionary["meta"])
                return instance
            }


            // Decoder for [MsgVpnAclProfileSubscribeException]
            Decoders.addDecoder(clazz: [MsgVpnAclProfileSubscribeException].self) { (source: AnyObject) -> [MsgVpnAclProfileSubscribeException] in
                return Decoders.decode(clazz: [MsgVpnAclProfileSubscribeException].self, source: source)
            }
            // Decoder for MsgVpnAclProfileSubscribeException
            Decoders.addDecoder(clazz: MsgVpnAclProfileSubscribeException.self) { (source: AnyObject) -> MsgVpnAclProfileSubscribeException in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnAclProfileSubscribeException()
                instance.aclProfileName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["aclProfileName"])
                instance.msgVpnName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["msgVpnName"])
                instance.subscribeExceptionTopic = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["subscribeExceptionTopic"])
                instance.topicSyntax = MsgVpnAclProfileSubscribeException.TopicSyntax(rawValue: (sourceDictionary["topicSyntax"] as? String) ?? "") 
                return instance
            }


            // Decoder for [MsgVpnAclProfileSubscribeExceptionLinks]
            Decoders.addDecoder(clazz: [MsgVpnAclProfileSubscribeExceptionLinks].self) { (source: AnyObject) -> [MsgVpnAclProfileSubscribeExceptionLinks] in
                return Decoders.decode(clazz: [MsgVpnAclProfileSubscribeExceptionLinks].self, source: source)
            }
            // Decoder for MsgVpnAclProfileSubscribeExceptionLinks
            Decoders.addDecoder(clazz: MsgVpnAclProfileSubscribeExceptionLinks.self) { (source: AnyObject) -> MsgVpnAclProfileSubscribeExceptionLinks in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnAclProfileSubscribeExceptionLinks()
                instance.uri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["uri"])
                return instance
            }


            // Decoder for [MsgVpnAclProfileSubscribeExceptionResponse]
            Decoders.addDecoder(clazz: [MsgVpnAclProfileSubscribeExceptionResponse].self) { (source: AnyObject) -> [MsgVpnAclProfileSubscribeExceptionResponse] in
                return Decoders.decode(clazz: [MsgVpnAclProfileSubscribeExceptionResponse].self, source: source)
            }
            // Decoder for MsgVpnAclProfileSubscribeExceptionResponse
            Decoders.addDecoder(clazz: MsgVpnAclProfileSubscribeExceptionResponse.self) { (source: AnyObject) -> MsgVpnAclProfileSubscribeExceptionResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnAclProfileSubscribeExceptionResponse()
                instance.data = Decoders.decodeOptional(clazz: MsgVpnAclProfileSubscribeException.self, source: sourceDictionary["data"])
                instance.links = Decoders.decodeOptional(clazz: MsgVpnAclProfileSubscribeExceptionLinks.self, source: sourceDictionary["links"])
                instance.meta = Decoders.decodeOptional(clazz: SempMeta.self, source: sourceDictionary["meta"])
                return instance
            }


            // Decoder for [MsgVpnAclProfileSubscribeExceptionsResponse]
            Decoders.addDecoder(clazz: [MsgVpnAclProfileSubscribeExceptionsResponse].self) { (source: AnyObject) -> [MsgVpnAclProfileSubscribeExceptionsResponse] in
                return Decoders.decode(clazz: [MsgVpnAclProfileSubscribeExceptionsResponse].self, source: source)
            }
            // Decoder for MsgVpnAclProfileSubscribeExceptionsResponse
            Decoders.addDecoder(clazz: MsgVpnAclProfileSubscribeExceptionsResponse.self) { (source: AnyObject) -> MsgVpnAclProfileSubscribeExceptionsResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnAclProfileSubscribeExceptionsResponse()
                instance.data = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["data"])
                instance.links = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["links"])
                instance.meta = Decoders.decodeOptional(clazz: SempMeta.self, source: sourceDictionary["meta"])
                return instance
            }


            // Decoder for [MsgVpnAclProfilesResponse]
            Decoders.addDecoder(clazz: [MsgVpnAclProfilesResponse].self) { (source: AnyObject) -> [MsgVpnAclProfilesResponse] in
                return Decoders.decode(clazz: [MsgVpnAclProfilesResponse].self, source: source)
            }
            // Decoder for MsgVpnAclProfilesResponse
            Decoders.addDecoder(clazz: MsgVpnAclProfilesResponse.self) { (source: AnyObject) -> MsgVpnAclProfilesResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnAclProfilesResponse()
                instance.data = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["data"])
                instance.links = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["links"])
                instance.meta = Decoders.decodeOptional(clazz: SempMeta.self, source: sourceDictionary["meta"])
                return instance
            }


            // Decoder for [MsgVpnAuthorizationGroup]
            Decoders.addDecoder(clazz: [MsgVpnAuthorizationGroup].self) { (source: AnyObject) -> [MsgVpnAuthorizationGroup] in
                return Decoders.decode(clazz: [MsgVpnAuthorizationGroup].self, source: source)
            }
            // Decoder for MsgVpnAuthorizationGroup
            Decoders.addDecoder(clazz: MsgVpnAuthorizationGroup.self) { (source: AnyObject) -> MsgVpnAuthorizationGroup in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnAuthorizationGroup()
                instance.aclProfileName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["aclProfileName"])
                instance.authorizationGroupName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["authorizationGroupName"])
                instance.clientProfileName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["clientProfileName"])
                instance.enabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["enabled"])
                instance.msgVpnName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["msgVpnName"])
                instance.orderAfterAuthorizationGroupName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["orderAfterAuthorizationGroupName"])
                instance.orderBeforeAuthorizationGroupName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["orderBeforeAuthorizationGroupName"])
                return instance
            }


            // Decoder for [MsgVpnAuthorizationGroupLinks]
            Decoders.addDecoder(clazz: [MsgVpnAuthorizationGroupLinks].self) { (source: AnyObject) -> [MsgVpnAuthorizationGroupLinks] in
                return Decoders.decode(clazz: [MsgVpnAuthorizationGroupLinks].self, source: source)
            }
            // Decoder for MsgVpnAuthorizationGroupLinks
            Decoders.addDecoder(clazz: MsgVpnAuthorizationGroupLinks.self) { (source: AnyObject) -> MsgVpnAuthorizationGroupLinks in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnAuthorizationGroupLinks()
                instance.uri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["uri"])
                return instance
            }


            // Decoder for [MsgVpnAuthorizationGroupResponse]
            Decoders.addDecoder(clazz: [MsgVpnAuthorizationGroupResponse].self) { (source: AnyObject) -> [MsgVpnAuthorizationGroupResponse] in
                return Decoders.decode(clazz: [MsgVpnAuthorizationGroupResponse].self, source: source)
            }
            // Decoder for MsgVpnAuthorizationGroupResponse
            Decoders.addDecoder(clazz: MsgVpnAuthorizationGroupResponse.self) { (source: AnyObject) -> MsgVpnAuthorizationGroupResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnAuthorizationGroupResponse()
                instance.data = Decoders.decodeOptional(clazz: MsgVpnAuthorizationGroup.self, source: sourceDictionary["data"])
                instance.links = Decoders.decodeOptional(clazz: MsgVpnAuthorizationGroupLinks.self, source: sourceDictionary["links"])
                instance.meta = Decoders.decodeOptional(clazz: SempMeta.self, source: sourceDictionary["meta"])
                return instance
            }


            // Decoder for [MsgVpnAuthorizationGroupsResponse]
            Decoders.addDecoder(clazz: [MsgVpnAuthorizationGroupsResponse].self) { (source: AnyObject) -> [MsgVpnAuthorizationGroupsResponse] in
                return Decoders.decode(clazz: [MsgVpnAuthorizationGroupsResponse].self, source: source)
            }
            // Decoder for MsgVpnAuthorizationGroupsResponse
            Decoders.addDecoder(clazz: MsgVpnAuthorizationGroupsResponse.self) { (source: AnyObject) -> MsgVpnAuthorizationGroupsResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnAuthorizationGroupsResponse()
                instance.data = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["data"])
                instance.links = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["links"])
                instance.meta = Decoders.decodeOptional(clazz: SempMeta.self, source: sourceDictionary["meta"])
                return instance
            }


            // Decoder for [MsgVpnBridge]
            Decoders.addDecoder(clazz: [MsgVpnBridge].self) { (source: AnyObject) -> [MsgVpnBridge] in
                return Decoders.decode(clazz: [MsgVpnBridge].self, source: source)
            }
            // Decoder for MsgVpnBridge
            Decoders.addDecoder(clazz: MsgVpnBridge.self) { (source: AnyObject) -> MsgVpnBridge in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnBridge()
                instance.bridgeName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bridgeName"])
                instance.bridgeVirtualRouter = MsgVpnBridge.BridgeVirtualRouter(rawValue: (sourceDictionary["bridgeVirtualRouter"] as? String) ?? "") 
                instance.enabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["enabled"])
                instance.maxTtl = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["maxTtl"])
                instance.msgVpnName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["msgVpnName"])
                instance.remoteAuthenticationBasicClientUsername = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["remoteAuthenticationBasicClientUsername"])
                instance.remoteAuthenticationBasicPassword = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["remoteAuthenticationBasicPassword"])
                instance.remoteAuthenticationClientCertContent = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["remoteAuthenticationClientCertContent"])
                instance.remoteAuthenticationClientCertPassword = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["remoteAuthenticationClientCertPassword"])
                instance.remoteAuthenticationScheme = MsgVpnBridge.RemoteAuthenticationScheme(rawValue: (sourceDictionary["remoteAuthenticationScheme"] as? String) ?? "") 
                instance.remoteConnectionRetryCount = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["remoteConnectionRetryCount"])
                instance.remoteConnectionRetryDelay = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["remoteConnectionRetryDelay"])
                instance.remoteDeliverToOnePriority = MsgVpnBridge.RemoteDeliverToOnePriority(rawValue: (sourceDictionary["remoteDeliverToOnePriority"] as? String) ?? "") 
                instance.tlsCipherSuiteList = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["tlsCipherSuiteList"])
                return instance
            }


            // Decoder for [MsgVpnBridgeLinks]
            Decoders.addDecoder(clazz: [MsgVpnBridgeLinks].self) { (source: AnyObject) -> [MsgVpnBridgeLinks] in
                return Decoders.decode(clazz: [MsgVpnBridgeLinks].self, source: source)
            }
            // Decoder for MsgVpnBridgeLinks
            Decoders.addDecoder(clazz: MsgVpnBridgeLinks.self) { (source: AnyObject) -> MsgVpnBridgeLinks in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnBridgeLinks()
                instance.remoteMsgVpnsUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["remoteMsgVpnsUri"])
                instance.remoteSubscriptionsUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["remoteSubscriptionsUri"])
                instance.tlsTrustedCommonNamesUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["tlsTrustedCommonNamesUri"])
                instance.uri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["uri"])
                return instance
            }


            // Decoder for [MsgVpnBridgeRemoteMsgVpn]
            Decoders.addDecoder(clazz: [MsgVpnBridgeRemoteMsgVpn].self) { (source: AnyObject) -> [MsgVpnBridgeRemoteMsgVpn] in
                return Decoders.decode(clazz: [MsgVpnBridgeRemoteMsgVpn].self, source: source)
            }
            // Decoder for MsgVpnBridgeRemoteMsgVpn
            Decoders.addDecoder(clazz: MsgVpnBridgeRemoteMsgVpn.self) { (source: AnyObject) -> MsgVpnBridgeRemoteMsgVpn in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnBridgeRemoteMsgVpn()
                instance.bridgeName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bridgeName"])
                instance.bridgeVirtualRouter = MsgVpnBridgeRemoteMsgVpn.BridgeVirtualRouter(rawValue: (sourceDictionary["bridgeVirtualRouter"] as? String) ?? "") 
                instance.clientUsername = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["clientUsername"])
                instance.compressedDataEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["compressedDataEnabled"])
                instance.connectOrder = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["connectOrder"])
                instance.egressFlowWindowSize = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["egressFlowWindowSize"])
                instance.enabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["enabled"])
                instance.msgVpnName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["msgVpnName"])
                instance.password = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["password"])
                instance.queueBinding = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["queueBinding"])
                instance.remoteMsgVpnInterface = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["remoteMsgVpnInterface"])
                instance.remoteMsgVpnLocation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["remoteMsgVpnLocation"])
                instance.remoteMsgVpnName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["remoteMsgVpnName"])
                instance.tlsEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["tlsEnabled"])
                instance.unidirectionalClientProfile = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["unidirectionalClientProfile"])
                return instance
            }


            // Decoder for [MsgVpnBridgeRemoteMsgVpnLinks]
            Decoders.addDecoder(clazz: [MsgVpnBridgeRemoteMsgVpnLinks].self) { (source: AnyObject) -> [MsgVpnBridgeRemoteMsgVpnLinks] in
                return Decoders.decode(clazz: [MsgVpnBridgeRemoteMsgVpnLinks].self, source: source)
            }
            // Decoder for MsgVpnBridgeRemoteMsgVpnLinks
            Decoders.addDecoder(clazz: MsgVpnBridgeRemoteMsgVpnLinks.self) { (source: AnyObject) -> MsgVpnBridgeRemoteMsgVpnLinks in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnBridgeRemoteMsgVpnLinks()
                instance.uri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["uri"])
                return instance
            }


            // Decoder for [MsgVpnBridgeRemoteMsgVpnResponse]
            Decoders.addDecoder(clazz: [MsgVpnBridgeRemoteMsgVpnResponse].self) { (source: AnyObject) -> [MsgVpnBridgeRemoteMsgVpnResponse] in
                return Decoders.decode(clazz: [MsgVpnBridgeRemoteMsgVpnResponse].self, source: source)
            }
            // Decoder for MsgVpnBridgeRemoteMsgVpnResponse
            Decoders.addDecoder(clazz: MsgVpnBridgeRemoteMsgVpnResponse.self) { (source: AnyObject) -> MsgVpnBridgeRemoteMsgVpnResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnBridgeRemoteMsgVpnResponse()
                instance.data = Decoders.decodeOptional(clazz: MsgVpnBridgeRemoteMsgVpn.self, source: sourceDictionary["data"])
                instance.links = Decoders.decodeOptional(clazz: MsgVpnBridgeRemoteMsgVpnLinks.self, source: sourceDictionary["links"])
                instance.meta = Decoders.decodeOptional(clazz: SempMeta.self, source: sourceDictionary["meta"])
                return instance
            }


            // Decoder for [MsgVpnBridgeRemoteMsgVpnsResponse]
            Decoders.addDecoder(clazz: [MsgVpnBridgeRemoteMsgVpnsResponse].self) { (source: AnyObject) -> [MsgVpnBridgeRemoteMsgVpnsResponse] in
                return Decoders.decode(clazz: [MsgVpnBridgeRemoteMsgVpnsResponse].self, source: source)
            }
            // Decoder for MsgVpnBridgeRemoteMsgVpnsResponse
            Decoders.addDecoder(clazz: MsgVpnBridgeRemoteMsgVpnsResponse.self) { (source: AnyObject) -> MsgVpnBridgeRemoteMsgVpnsResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnBridgeRemoteMsgVpnsResponse()
                instance.data = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["data"])
                instance.links = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["links"])
                instance.meta = Decoders.decodeOptional(clazz: SempMeta.self, source: sourceDictionary["meta"])
                return instance
            }


            // Decoder for [MsgVpnBridgeRemoteSubscription]
            Decoders.addDecoder(clazz: [MsgVpnBridgeRemoteSubscription].self) { (source: AnyObject) -> [MsgVpnBridgeRemoteSubscription] in
                return Decoders.decode(clazz: [MsgVpnBridgeRemoteSubscription].self, source: source)
            }
            // Decoder for MsgVpnBridgeRemoteSubscription
            Decoders.addDecoder(clazz: MsgVpnBridgeRemoteSubscription.self) { (source: AnyObject) -> MsgVpnBridgeRemoteSubscription in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnBridgeRemoteSubscription()
                instance.bridgeName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bridgeName"])
                instance.bridgeVirtualRouter = MsgVpnBridgeRemoteSubscription.BridgeVirtualRouter(rawValue: (sourceDictionary["bridgeVirtualRouter"] as? String) ?? "") 
                instance.deliverAlwaysEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["deliverAlwaysEnabled"])
                instance.msgVpnName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["msgVpnName"])
                instance.remoteSubscriptionTopic = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["remoteSubscriptionTopic"])
                return instance
            }


            // Decoder for [MsgVpnBridgeRemoteSubscriptionLinks]
            Decoders.addDecoder(clazz: [MsgVpnBridgeRemoteSubscriptionLinks].self) { (source: AnyObject) -> [MsgVpnBridgeRemoteSubscriptionLinks] in
                return Decoders.decode(clazz: [MsgVpnBridgeRemoteSubscriptionLinks].self, source: source)
            }
            // Decoder for MsgVpnBridgeRemoteSubscriptionLinks
            Decoders.addDecoder(clazz: MsgVpnBridgeRemoteSubscriptionLinks.self) { (source: AnyObject) -> MsgVpnBridgeRemoteSubscriptionLinks in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnBridgeRemoteSubscriptionLinks()
                instance.uri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["uri"])
                return instance
            }


            // Decoder for [MsgVpnBridgeRemoteSubscriptionResponse]
            Decoders.addDecoder(clazz: [MsgVpnBridgeRemoteSubscriptionResponse].self) { (source: AnyObject) -> [MsgVpnBridgeRemoteSubscriptionResponse] in
                return Decoders.decode(clazz: [MsgVpnBridgeRemoteSubscriptionResponse].self, source: source)
            }
            // Decoder for MsgVpnBridgeRemoteSubscriptionResponse
            Decoders.addDecoder(clazz: MsgVpnBridgeRemoteSubscriptionResponse.self) { (source: AnyObject) -> MsgVpnBridgeRemoteSubscriptionResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnBridgeRemoteSubscriptionResponse()
                instance.data = Decoders.decodeOptional(clazz: MsgVpnBridgeRemoteSubscription.self, source: sourceDictionary["data"])
                instance.links = Decoders.decodeOptional(clazz: MsgVpnBridgeRemoteSubscriptionLinks.self, source: sourceDictionary["links"])
                instance.meta = Decoders.decodeOptional(clazz: SempMeta.self, source: sourceDictionary["meta"])
                return instance
            }


            // Decoder for [MsgVpnBridgeRemoteSubscriptionsResponse]
            Decoders.addDecoder(clazz: [MsgVpnBridgeRemoteSubscriptionsResponse].self) { (source: AnyObject) -> [MsgVpnBridgeRemoteSubscriptionsResponse] in
                return Decoders.decode(clazz: [MsgVpnBridgeRemoteSubscriptionsResponse].self, source: source)
            }
            // Decoder for MsgVpnBridgeRemoteSubscriptionsResponse
            Decoders.addDecoder(clazz: MsgVpnBridgeRemoteSubscriptionsResponse.self) { (source: AnyObject) -> MsgVpnBridgeRemoteSubscriptionsResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnBridgeRemoteSubscriptionsResponse()
                instance.data = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["data"])
                instance.links = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["links"])
                instance.meta = Decoders.decodeOptional(clazz: SempMeta.self, source: sourceDictionary["meta"])
                return instance
            }


            // Decoder for [MsgVpnBridgeResponse]
            Decoders.addDecoder(clazz: [MsgVpnBridgeResponse].self) { (source: AnyObject) -> [MsgVpnBridgeResponse] in
                return Decoders.decode(clazz: [MsgVpnBridgeResponse].self, source: source)
            }
            // Decoder for MsgVpnBridgeResponse
            Decoders.addDecoder(clazz: MsgVpnBridgeResponse.self) { (source: AnyObject) -> MsgVpnBridgeResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnBridgeResponse()
                instance.data = Decoders.decodeOptional(clazz: MsgVpnBridge.self, source: sourceDictionary["data"])
                instance.links = Decoders.decodeOptional(clazz: MsgVpnBridgeLinks.self, source: sourceDictionary["links"])
                instance.meta = Decoders.decodeOptional(clazz: SempMeta.self, source: sourceDictionary["meta"])
                return instance
            }


            // Decoder for [MsgVpnBridgeTlsTrustedCommonName]
            Decoders.addDecoder(clazz: [MsgVpnBridgeTlsTrustedCommonName].self) { (source: AnyObject) -> [MsgVpnBridgeTlsTrustedCommonName] in
                return Decoders.decode(clazz: [MsgVpnBridgeTlsTrustedCommonName].self, source: source)
            }
            // Decoder for MsgVpnBridgeTlsTrustedCommonName
            Decoders.addDecoder(clazz: MsgVpnBridgeTlsTrustedCommonName.self) { (source: AnyObject) -> MsgVpnBridgeTlsTrustedCommonName in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnBridgeTlsTrustedCommonName()
                instance.bridgeName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bridgeName"])
                instance.bridgeVirtualRouter = MsgVpnBridgeTlsTrustedCommonName.BridgeVirtualRouter(rawValue: (sourceDictionary["bridgeVirtualRouter"] as? String) ?? "") 
                instance.msgVpnName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["msgVpnName"])
                instance.tlsTrustedCommonName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["tlsTrustedCommonName"])
                return instance
            }


            // Decoder for [MsgVpnBridgeTlsTrustedCommonNameLinks]
            Decoders.addDecoder(clazz: [MsgVpnBridgeTlsTrustedCommonNameLinks].self) { (source: AnyObject) -> [MsgVpnBridgeTlsTrustedCommonNameLinks] in
                return Decoders.decode(clazz: [MsgVpnBridgeTlsTrustedCommonNameLinks].self, source: source)
            }
            // Decoder for MsgVpnBridgeTlsTrustedCommonNameLinks
            Decoders.addDecoder(clazz: MsgVpnBridgeTlsTrustedCommonNameLinks.self) { (source: AnyObject) -> MsgVpnBridgeTlsTrustedCommonNameLinks in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnBridgeTlsTrustedCommonNameLinks()
                instance.uri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["uri"])
                return instance
            }


            // Decoder for [MsgVpnBridgeTlsTrustedCommonNameResponse]
            Decoders.addDecoder(clazz: [MsgVpnBridgeTlsTrustedCommonNameResponse].self) { (source: AnyObject) -> [MsgVpnBridgeTlsTrustedCommonNameResponse] in
                return Decoders.decode(clazz: [MsgVpnBridgeTlsTrustedCommonNameResponse].self, source: source)
            }
            // Decoder for MsgVpnBridgeTlsTrustedCommonNameResponse
            Decoders.addDecoder(clazz: MsgVpnBridgeTlsTrustedCommonNameResponse.self) { (source: AnyObject) -> MsgVpnBridgeTlsTrustedCommonNameResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnBridgeTlsTrustedCommonNameResponse()
                instance.data = Decoders.decodeOptional(clazz: MsgVpnBridgeTlsTrustedCommonName.self, source: sourceDictionary["data"])
                instance.links = Decoders.decodeOptional(clazz: MsgVpnBridgeTlsTrustedCommonNameLinks.self, source: sourceDictionary["links"])
                instance.meta = Decoders.decodeOptional(clazz: SempMeta.self, source: sourceDictionary["meta"])
                return instance
            }


            // Decoder for [MsgVpnBridgeTlsTrustedCommonNamesResponse]
            Decoders.addDecoder(clazz: [MsgVpnBridgeTlsTrustedCommonNamesResponse].self) { (source: AnyObject) -> [MsgVpnBridgeTlsTrustedCommonNamesResponse] in
                return Decoders.decode(clazz: [MsgVpnBridgeTlsTrustedCommonNamesResponse].self, source: source)
            }
            // Decoder for MsgVpnBridgeTlsTrustedCommonNamesResponse
            Decoders.addDecoder(clazz: MsgVpnBridgeTlsTrustedCommonNamesResponse.self) { (source: AnyObject) -> MsgVpnBridgeTlsTrustedCommonNamesResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnBridgeTlsTrustedCommonNamesResponse()
                instance.data = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["data"])
                instance.links = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["links"])
                instance.meta = Decoders.decodeOptional(clazz: SempMeta.self, source: sourceDictionary["meta"])
                return instance
            }


            // Decoder for [MsgVpnBridgesResponse]
            Decoders.addDecoder(clazz: [MsgVpnBridgesResponse].self) { (source: AnyObject) -> [MsgVpnBridgesResponse] in
                return Decoders.decode(clazz: [MsgVpnBridgesResponse].self, source: source)
            }
            // Decoder for MsgVpnBridgesResponse
            Decoders.addDecoder(clazz: MsgVpnBridgesResponse.self) { (source: AnyObject) -> MsgVpnBridgesResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnBridgesResponse()
                instance.data = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["data"])
                instance.links = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["links"])
                instance.meta = Decoders.decodeOptional(clazz: SempMeta.self, source: sourceDictionary["meta"])
                return instance
            }


            // Decoder for [MsgVpnClientProfile]
            Decoders.addDecoder(clazz: [MsgVpnClientProfile].self) { (source: AnyObject) -> [MsgVpnClientProfile] in
                return Decoders.decode(clazz: [MsgVpnClientProfile].self, source: source)
            }
            // Decoder for MsgVpnClientProfile
            Decoders.addDecoder(clazz: MsgVpnClientProfile.self) { (source: AnyObject) -> MsgVpnClientProfile in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnClientProfile()
                instance.allowBridgeConnectionsEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["allowBridgeConnectionsEnabled"])
                instance.allowCutThroughForwardingEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["allowCutThroughForwardingEnabled"])
                instance.allowGuaranteedEndpointCreateEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["allowGuaranteedEndpointCreateEnabled"])
                instance.allowGuaranteedMsgReceiveEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["allowGuaranteedMsgReceiveEnabled"])
                instance.allowGuaranteedMsgSendEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["allowGuaranteedMsgSendEnabled"])
                instance.allowTransactedSessionsEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["allowTransactedSessionsEnabled"])
                instance.apiQueueManagementCopyFromOnCreateName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["apiQueueManagementCopyFromOnCreateName"])
                instance.apiTopicEndpointManagementCopyFromOnCreateName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["apiTopicEndpointManagementCopyFromOnCreateName"])
                instance.clientProfileName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["clientProfileName"])
                instance.compressionEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["compressionEnabled"])
                instance.elidingDelay = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["elidingDelay"])
                instance.elidingEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["elidingEnabled"])
                instance.elidingMaxTopicCount = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["elidingMaxTopicCount"])
                instance.eventClientProvisionedEndpointSpoolUsageThreshold = Decoders.decodeOptional(clazz: EventThresholdByPercent.self, source: sourceDictionary["eventClientProvisionedEndpointSpoolUsageThreshold"])
                instance.eventConnectionCountPerClientUsernameThreshold = Decoders.decodeOptional(clazz: EventThreshold.self, source: sourceDictionary["eventConnectionCountPerClientUsernameThreshold"])
                instance.eventEgressFlowCountThreshold = Decoders.decodeOptional(clazz: EventThreshold.self, source: sourceDictionary["eventEgressFlowCountThreshold"])
                instance.eventEndpointCountPerClientUsernameThreshold = Decoders.decodeOptional(clazz: EventThreshold.self, source: sourceDictionary["eventEndpointCountPerClientUsernameThreshold"])
                instance.eventIngressFlowCountThreshold = Decoders.decodeOptional(clazz: EventThreshold.self, source: sourceDictionary["eventIngressFlowCountThreshold"])
                instance.eventServiceSmfConnectionCountPerClientUsernameThreshold = Decoders.decodeOptional(clazz: EventThreshold.self, source: sourceDictionary["eventServiceSmfConnectionCountPerClientUsernameThreshold"])
                instance.eventServiceWebConnectionCountPerClientUsernameThreshold = Decoders.decodeOptional(clazz: EventThreshold.self, source: sourceDictionary["eventServiceWebConnectionCountPerClientUsernameThreshold"])
                instance.eventSubscriptionCountThreshold = Decoders.decodeOptional(clazz: EventThreshold.self, source: sourceDictionary["eventSubscriptionCountThreshold"])
                instance.eventTransactedSessionCountThreshold = Decoders.decodeOptional(clazz: EventThreshold.self, source: sourceDictionary["eventTransactedSessionCountThreshold"])
                instance.eventTransactionCountThreshold = Decoders.decodeOptional(clazz: EventThreshold.self, source: sourceDictionary["eventTransactionCountThreshold"])
                instance.maxConnectionCountPerClientUsername = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["maxConnectionCountPerClientUsername"])
                instance.maxEgressFlowCount = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["maxEgressFlowCount"])
                instance.maxEndpointCountPerClientUsername = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["maxEndpointCountPerClientUsername"])
                instance.maxIngressFlowCount = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["maxIngressFlowCount"])
                instance.maxSubscriptionCount = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["maxSubscriptionCount"])
                instance.maxTransactedSessionCount = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["maxTransactedSessionCount"])
                instance.maxTransactionCount = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["maxTransactionCount"])
                instance.msgVpnName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["msgVpnName"])
                instance.queueControl1MaxDepth = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["queueControl1MaxDepth"])
                instance.queueControl1MinMsgBurst = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["queueControl1MinMsgBurst"])
                instance.queueDirect1MaxDepth = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["queueDirect1MaxDepth"])
                instance.queueDirect1MinMsgBurst = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["queueDirect1MinMsgBurst"])
                instance.queueDirect2MaxDepth = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["queueDirect2MaxDepth"])
                instance.queueDirect2MinMsgBurst = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["queueDirect2MinMsgBurst"])
                instance.queueDirect3MaxDepth = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["queueDirect3MaxDepth"])
                instance.queueDirect3MinMsgBurst = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["queueDirect3MinMsgBurst"])
                instance.queueGuaranteed1MaxDepth = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["queueGuaranteed1MaxDepth"])
                instance.queueGuaranteed1MinMsgBurst = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["queueGuaranteed1MinMsgBurst"])
                instance.rejectMsgToSenderOnNoSubscriptionMatchEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["rejectMsgToSenderOnNoSubscriptionMatchEnabled"])
                instance.replicationAllowClientConnectWhenStandbyEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["replicationAllowClientConnectWhenStandbyEnabled"])
                instance.serviceSmfMaxConnectionCountPerClientUsername = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["serviceSmfMaxConnectionCountPerClientUsername"])
                instance.serviceWebInactiveTimeout = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["serviceWebInactiveTimeout"])
                instance.serviceWebMaxConnectionCountPerClientUsername = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["serviceWebMaxConnectionCountPerClientUsername"])
                instance.serviceWebMaxPayload = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["serviceWebMaxPayload"])
                instance.tcpCongestionWindowSize = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["tcpCongestionWindowSize"])
                instance.tcpKeepaliveCount = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["tcpKeepaliveCount"])
                instance.tcpKeepaliveIdleTime = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["tcpKeepaliveIdleTime"])
                instance.tcpKeepaliveInterval = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["tcpKeepaliveInterval"])
                instance.tcpMaxSegmentSize = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["tcpMaxSegmentSize"])
                instance.tcpMaxWindowSize = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["tcpMaxWindowSize"])
                instance.tlsAllowDowngradeToPlainTextEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["tlsAllowDowngradeToPlainTextEnabled"])
                return instance
            }


            // Decoder for [MsgVpnClientProfileLinks]
            Decoders.addDecoder(clazz: [MsgVpnClientProfileLinks].self) { (source: AnyObject) -> [MsgVpnClientProfileLinks] in
                return Decoders.decode(clazz: [MsgVpnClientProfileLinks].self, source: source)
            }
            // Decoder for MsgVpnClientProfileLinks
            Decoders.addDecoder(clazz: MsgVpnClientProfileLinks.self) { (source: AnyObject) -> MsgVpnClientProfileLinks in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnClientProfileLinks()
                instance.uri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["uri"])
                return instance
            }


            // Decoder for [MsgVpnClientProfileResponse]
            Decoders.addDecoder(clazz: [MsgVpnClientProfileResponse].self) { (source: AnyObject) -> [MsgVpnClientProfileResponse] in
                return Decoders.decode(clazz: [MsgVpnClientProfileResponse].self, source: source)
            }
            // Decoder for MsgVpnClientProfileResponse
            Decoders.addDecoder(clazz: MsgVpnClientProfileResponse.self) { (source: AnyObject) -> MsgVpnClientProfileResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnClientProfileResponse()
                instance.data = Decoders.decodeOptional(clazz: MsgVpnClientProfile.self, source: sourceDictionary["data"])
                instance.links = Decoders.decodeOptional(clazz: MsgVpnClientProfileLinks.self, source: sourceDictionary["links"])
                instance.meta = Decoders.decodeOptional(clazz: SempMeta.self, source: sourceDictionary["meta"])
                return instance
            }


            // Decoder for [MsgVpnClientProfilesResponse]
            Decoders.addDecoder(clazz: [MsgVpnClientProfilesResponse].self) { (source: AnyObject) -> [MsgVpnClientProfilesResponse] in
                return Decoders.decode(clazz: [MsgVpnClientProfilesResponse].self, source: source)
            }
            // Decoder for MsgVpnClientProfilesResponse
            Decoders.addDecoder(clazz: MsgVpnClientProfilesResponse.self) { (source: AnyObject) -> MsgVpnClientProfilesResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnClientProfilesResponse()
                instance.data = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["data"])
                instance.links = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["links"])
                instance.meta = Decoders.decodeOptional(clazz: SempMeta.self, source: sourceDictionary["meta"])
                return instance
            }


            // Decoder for [MsgVpnClientUsername]
            Decoders.addDecoder(clazz: [MsgVpnClientUsername].self) { (source: AnyObject) -> [MsgVpnClientUsername] in
                return Decoders.decode(clazz: [MsgVpnClientUsername].self, source: source)
            }
            // Decoder for MsgVpnClientUsername
            Decoders.addDecoder(clazz: MsgVpnClientUsername.self) { (source: AnyObject) -> MsgVpnClientUsername in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnClientUsername()
                instance.aclProfileName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["aclProfileName"])
                instance.clientProfileName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["clientProfileName"])
                instance.clientUsername = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["clientUsername"])
                instance.enabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["enabled"])
                instance.guaranteedEndpointPermissionOverrideEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["guaranteedEndpointPermissionOverrideEnabled"])
                instance.msgVpnName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["msgVpnName"])
                instance.password = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["password"])
                instance.subscriptionManagerEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["subscriptionManagerEnabled"])
                return instance
            }


            // Decoder for [MsgVpnClientUsernameLinks]
            Decoders.addDecoder(clazz: [MsgVpnClientUsernameLinks].self) { (source: AnyObject) -> [MsgVpnClientUsernameLinks] in
                return Decoders.decode(clazz: [MsgVpnClientUsernameLinks].self, source: source)
            }
            // Decoder for MsgVpnClientUsernameLinks
            Decoders.addDecoder(clazz: MsgVpnClientUsernameLinks.self) { (source: AnyObject) -> MsgVpnClientUsernameLinks in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnClientUsernameLinks()
                instance.uri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["uri"])
                return instance
            }


            // Decoder for [MsgVpnClientUsernameResponse]
            Decoders.addDecoder(clazz: [MsgVpnClientUsernameResponse].self) { (source: AnyObject) -> [MsgVpnClientUsernameResponse] in
                return Decoders.decode(clazz: [MsgVpnClientUsernameResponse].self, source: source)
            }
            // Decoder for MsgVpnClientUsernameResponse
            Decoders.addDecoder(clazz: MsgVpnClientUsernameResponse.self) { (source: AnyObject) -> MsgVpnClientUsernameResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnClientUsernameResponse()
                instance.data = Decoders.decodeOptional(clazz: MsgVpnClientUsername.self, source: sourceDictionary["data"])
                instance.links = Decoders.decodeOptional(clazz: MsgVpnClientUsernameLinks.self, source: sourceDictionary["links"])
                instance.meta = Decoders.decodeOptional(clazz: SempMeta.self, source: sourceDictionary["meta"])
                return instance
            }


            // Decoder for [MsgVpnClientUsernamesResponse]
            Decoders.addDecoder(clazz: [MsgVpnClientUsernamesResponse].self) { (source: AnyObject) -> [MsgVpnClientUsernamesResponse] in
                return Decoders.decode(clazz: [MsgVpnClientUsernamesResponse].self, source: source)
            }
            // Decoder for MsgVpnClientUsernamesResponse
            Decoders.addDecoder(clazz: MsgVpnClientUsernamesResponse.self) { (source: AnyObject) -> MsgVpnClientUsernamesResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnClientUsernamesResponse()
                instance.data = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["data"])
                instance.links = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["links"])
                instance.meta = Decoders.decodeOptional(clazz: SempMeta.self, source: sourceDictionary["meta"])
                return instance
            }


            // Decoder for [MsgVpnJndiConnectionFactoriesResponse]
            Decoders.addDecoder(clazz: [MsgVpnJndiConnectionFactoriesResponse].self) { (source: AnyObject) -> [MsgVpnJndiConnectionFactoriesResponse] in
                return Decoders.decode(clazz: [MsgVpnJndiConnectionFactoriesResponse].self, source: source)
            }
            // Decoder for MsgVpnJndiConnectionFactoriesResponse
            Decoders.addDecoder(clazz: MsgVpnJndiConnectionFactoriesResponse.self) { (source: AnyObject) -> MsgVpnJndiConnectionFactoriesResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnJndiConnectionFactoriesResponse()
                instance.data = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["data"])
                instance.links = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["links"])
                instance.meta = Decoders.decodeOptional(clazz: SempMeta.self, source: sourceDictionary["meta"])
                return instance
            }


            // Decoder for [MsgVpnJndiConnectionFactory]
            Decoders.addDecoder(clazz: [MsgVpnJndiConnectionFactory].self) { (source: AnyObject) -> [MsgVpnJndiConnectionFactory] in
                return Decoders.decode(clazz: [MsgVpnJndiConnectionFactory].self, source: source)
            }
            // Decoder for MsgVpnJndiConnectionFactory
            Decoders.addDecoder(clazz: MsgVpnJndiConnectionFactory.self) { (source: AnyObject) -> MsgVpnJndiConnectionFactory in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnJndiConnectionFactory()
                instance.allowDuplicateClientIdEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["allowDuplicateClientIdEnabled"])
                instance.clientDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["clientDescription"])
                instance.clientId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["clientId"])
                instance.connectionFactoryName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["connectionFactoryName"])
                instance.dtoReceiveOverrideEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["dtoReceiveOverrideEnabled"])
                instance.dtoReceiveSubscriberLocalPriority = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["dtoReceiveSubscriberLocalPriority"])
                instance.dtoReceiveSubscriberNetworkPriority = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["dtoReceiveSubscriberNetworkPriority"])
                instance.dtoSendEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["dtoSendEnabled"])
                instance.dynamicEndpointCreateDurableEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["dynamicEndpointCreateDurableEnabled"])
                instance.dynamicEndpointRespectTtlEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["dynamicEndpointRespectTtlEnabled"])
                instance.guaranteedReceiveAckTimeout = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["guaranteedReceiveAckTimeout"])
                instance.guaranteedReceiveWindowSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["guaranteedReceiveWindowSize"])
                instance.guaranteedReceiveWindowSizeAckThreshold = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["guaranteedReceiveWindowSizeAckThreshold"])
                instance.guaranteedSendAckTimeout = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["guaranteedSendAckTimeout"])
                instance.guaranteedSendWindowSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["guaranteedSendWindowSize"])
                instance.messagingDefaultDeliveryMode = MsgVpnJndiConnectionFactory.MessagingDefaultDeliveryMode(rawValue: (sourceDictionary["messagingDefaultDeliveryMode"] as? String) ?? "") 
                instance.messagingDefaultDmqEligibleEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["messagingDefaultDmqEligibleEnabled"])
                instance.messagingDefaultElidingEligibleEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["messagingDefaultElidingEligibleEnabled"])
                instance.messagingJmsxUserIdEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["messagingJmsxUserIdEnabled"])
                instance.messagingTextInXmlPayloadEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["messagingTextInXmlPayloadEnabled"])
                instance.msgVpnName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["msgVpnName"])
                instance.transportCompressionLevel = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["transportCompressionLevel"])
                instance.transportConnectRetryCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["transportConnectRetryCount"])
                instance.transportConnectRetryPerHostCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["transportConnectRetryPerHostCount"])
                instance.transportConnectTimeout = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["transportConnectTimeout"])
                instance.transportDirectTransportEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["transportDirectTransportEnabled"])
                instance.transportKeepaliveCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["transportKeepaliveCount"])
                instance.transportKeepaliveEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["transportKeepaliveEnabled"])
                instance.transportKeepaliveInterval = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["transportKeepaliveInterval"])
                instance.transportMsgCallbackOnIoThreadEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["transportMsgCallbackOnIoThreadEnabled"])
                instance.transportOptimizeDirectEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["transportOptimizeDirectEnabled"])
                instance.transportPort = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["transportPort"])
                instance.transportReadTimeout = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["transportReadTimeout"])
                instance.transportReceiveBufferSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["transportReceiveBufferSize"])
                instance.transportReconnectRetryCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["transportReconnectRetryCount"])
                instance.transportReconnectRetryWait = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["transportReconnectRetryWait"])
                instance.transportSendBufferSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["transportSendBufferSize"])
                instance.transportTcpNoDelayEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["transportTcpNoDelayEnabled"])
                instance.xaEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["xaEnabled"])
                return instance
            }


            // Decoder for [MsgVpnJndiConnectionFactoryLinks]
            Decoders.addDecoder(clazz: [MsgVpnJndiConnectionFactoryLinks].self) { (source: AnyObject) -> [MsgVpnJndiConnectionFactoryLinks] in
                return Decoders.decode(clazz: [MsgVpnJndiConnectionFactoryLinks].self, source: source)
            }
            // Decoder for MsgVpnJndiConnectionFactoryLinks
            Decoders.addDecoder(clazz: MsgVpnJndiConnectionFactoryLinks.self) { (source: AnyObject) -> MsgVpnJndiConnectionFactoryLinks in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnJndiConnectionFactoryLinks()
                instance.uri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["uri"])
                return instance
            }


            // Decoder for [MsgVpnJndiConnectionFactoryResponse]
            Decoders.addDecoder(clazz: [MsgVpnJndiConnectionFactoryResponse].self) { (source: AnyObject) -> [MsgVpnJndiConnectionFactoryResponse] in
                return Decoders.decode(clazz: [MsgVpnJndiConnectionFactoryResponse].self, source: source)
            }
            // Decoder for MsgVpnJndiConnectionFactoryResponse
            Decoders.addDecoder(clazz: MsgVpnJndiConnectionFactoryResponse.self) { (source: AnyObject) -> MsgVpnJndiConnectionFactoryResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnJndiConnectionFactoryResponse()
                instance.data = Decoders.decodeOptional(clazz: MsgVpnJndiConnectionFactory.self, source: sourceDictionary["data"])
                instance.links = Decoders.decodeOptional(clazz: MsgVpnJndiConnectionFactoryLinks.self, source: sourceDictionary["links"])
                instance.meta = Decoders.decodeOptional(clazz: SempMeta.self, source: sourceDictionary["meta"])
                return instance
            }


            // Decoder for [MsgVpnJndiQueue]
            Decoders.addDecoder(clazz: [MsgVpnJndiQueue].self) { (source: AnyObject) -> [MsgVpnJndiQueue] in
                return Decoders.decode(clazz: [MsgVpnJndiQueue].self, source: source)
            }
            // Decoder for MsgVpnJndiQueue
            Decoders.addDecoder(clazz: MsgVpnJndiQueue.self) { (source: AnyObject) -> MsgVpnJndiQueue in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnJndiQueue()
                instance.msgVpnName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["msgVpnName"])
                instance.physicalName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["physicalName"])
                instance.queueName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["queueName"])
                return instance
            }


            // Decoder for [MsgVpnJndiQueueLinks]
            Decoders.addDecoder(clazz: [MsgVpnJndiQueueLinks].self) { (source: AnyObject) -> [MsgVpnJndiQueueLinks] in
                return Decoders.decode(clazz: [MsgVpnJndiQueueLinks].self, source: source)
            }
            // Decoder for MsgVpnJndiQueueLinks
            Decoders.addDecoder(clazz: MsgVpnJndiQueueLinks.self) { (source: AnyObject) -> MsgVpnJndiQueueLinks in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnJndiQueueLinks()
                instance.uri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["uri"])
                return instance
            }


            // Decoder for [MsgVpnJndiQueueResponse]
            Decoders.addDecoder(clazz: [MsgVpnJndiQueueResponse].self) { (source: AnyObject) -> [MsgVpnJndiQueueResponse] in
                return Decoders.decode(clazz: [MsgVpnJndiQueueResponse].self, source: source)
            }
            // Decoder for MsgVpnJndiQueueResponse
            Decoders.addDecoder(clazz: MsgVpnJndiQueueResponse.self) { (source: AnyObject) -> MsgVpnJndiQueueResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnJndiQueueResponse()
                instance.data = Decoders.decodeOptional(clazz: MsgVpnJndiQueue.self, source: sourceDictionary["data"])
                instance.links = Decoders.decodeOptional(clazz: MsgVpnJndiQueueLinks.self, source: sourceDictionary["links"])
                instance.meta = Decoders.decodeOptional(clazz: SempMeta.self, source: sourceDictionary["meta"])
                return instance
            }


            // Decoder for [MsgVpnJndiQueuesResponse]
            Decoders.addDecoder(clazz: [MsgVpnJndiQueuesResponse].self) { (source: AnyObject) -> [MsgVpnJndiQueuesResponse] in
                return Decoders.decode(clazz: [MsgVpnJndiQueuesResponse].self, source: source)
            }
            // Decoder for MsgVpnJndiQueuesResponse
            Decoders.addDecoder(clazz: MsgVpnJndiQueuesResponse.self) { (source: AnyObject) -> MsgVpnJndiQueuesResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnJndiQueuesResponse()
                instance.data = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["data"])
                instance.links = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["links"])
                instance.meta = Decoders.decodeOptional(clazz: SempMeta.self, source: sourceDictionary["meta"])
                return instance
            }


            // Decoder for [MsgVpnJndiTopic]
            Decoders.addDecoder(clazz: [MsgVpnJndiTopic].self) { (source: AnyObject) -> [MsgVpnJndiTopic] in
                return Decoders.decode(clazz: [MsgVpnJndiTopic].self, source: source)
            }
            // Decoder for MsgVpnJndiTopic
            Decoders.addDecoder(clazz: MsgVpnJndiTopic.self) { (source: AnyObject) -> MsgVpnJndiTopic in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnJndiTopic()
                instance.msgVpnName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["msgVpnName"])
                instance.physicalName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["physicalName"])
                instance.topicName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["topicName"])
                return instance
            }


            // Decoder for [MsgVpnJndiTopicLinks]
            Decoders.addDecoder(clazz: [MsgVpnJndiTopicLinks].self) { (source: AnyObject) -> [MsgVpnJndiTopicLinks] in
                return Decoders.decode(clazz: [MsgVpnJndiTopicLinks].self, source: source)
            }
            // Decoder for MsgVpnJndiTopicLinks
            Decoders.addDecoder(clazz: MsgVpnJndiTopicLinks.self) { (source: AnyObject) -> MsgVpnJndiTopicLinks in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnJndiTopicLinks()
                instance.uri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["uri"])
                return instance
            }


            // Decoder for [MsgVpnJndiTopicResponse]
            Decoders.addDecoder(clazz: [MsgVpnJndiTopicResponse].self) { (source: AnyObject) -> [MsgVpnJndiTopicResponse] in
                return Decoders.decode(clazz: [MsgVpnJndiTopicResponse].self, source: source)
            }
            // Decoder for MsgVpnJndiTopicResponse
            Decoders.addDecoder(clazz: MsgVpnJndiTopicResponse.self) { (source: AnyObject) -> MsgVpnJndiTopicResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnJndiTopicResponse()
                instance.data = Decoders.decodeOptional(clazz: MsgVpnJndiTopic.self, source: sourceDictionary["data"])
                instance.links = Decoders.decodeOptional(clazz: MsgVpnJndiTopicLinks.self, source: sourceDictionary["links"])
                instance.meta = Decoders.decodeOptional(clazz: SempMeta.self, source: sourceDictionary["meta"])
                return instance
            }


            // Decoder for [MsgVpnJndiTopicsResponse]
            Decoders.addDecoder(clazz: [MsgVpnJndiTopicsResponse].self) { (source: AnyObject) -> [MsgVpnJndiTopicsResponse] in
                return Decoders.decode(clazz: [MsgVpnJndiTopicsResponse].self, source: source)
            }
            // Decoder for MsgVpnJndiTopicsResponse
            Decoders.addDecoder(clazz: MsgVpnJndiTopicsResponse.self) { (source: AnyObject) -> MsgVpnJndiTopicsResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnJndiTopicsResponse()
                instance.data = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["data"])
                instance.links = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["links"])
                instance.meta = Decoders.decodeOptional(clazz: SempMeta.self, source: sourceDictionary["meta"])
                return instance
            }


            // Decoder for [MsgVpnLinks]
            Decoders.addDecoder(clazz: [MsgVpnLinks].self) { (source: AnyObject) -> [MsgVpnLinks] in
                return Decoders.decode(clazz: [MsgVpnLinks].self, source: source)
            }
            // Decoder for MsgVpnLinks
            Decoders.addDecoder(clazz: MsgVpnLinks.self) { (source: AnyObject) -> MsgVpnLinks in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnLinks()
                instance.aclProfilesUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["aclProfilesUri"])
                instance.authorizationGroupsUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["authorizationGroupsUri"])
                instance.bridgesUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bridgesUri"])
                instance.clientProfilesUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["clientProfilesUri"])
                instance.clientUsernamesUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["clientUsernamesUri"])
                instance.jndiConnectionFactoriesUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["jndiConnectionFactoriesUri"])
                instance.jndiQueuesUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["jndiQueuesUri"])
                instance.jndiTopicsUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["jndiTopicsUri"])
                instance.mqttSessionsUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["mqttSessionsUri"])
                instance.queuesUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["queuesUri"])
                instance.replayLogsUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["replayLogsUri"])
                instance.replicatedTopicsUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["replicatedTopicsUri"])
                instance.restDeliveryPointsUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["restDeliveryPointsUri"])
                instance.sequencedTopicsUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sequencedTopicsUri"])
                instance.topicEndpointsUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["topicEndpointsUri"])
                instance.uri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["uri"])
                return instance
            }


            // Decoder for [MsgVpnMqttSession]
            Decoders.addDecoder(clazz: [MsgVpnMqttSession].self) { (source: AnyObject) -> [MsgVpnMqttSession] in
                return Decoders.decode(clazz: [MsgVpnMqttSession].self, source: source)
            }
            // Decoder for MsgVpnMqttSession
            Decoders.addDecoder(clazz: MsgVpnMqttSession.self) { (source: AnyObject) -> MsgVpnMqttSession in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnMqttSession()
                instance.enabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["enabled"])
                instance.mqttSessionClientId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["mqttSessionClientId"])
                instance.mqttSessionVirtualRouter = MsgVpnMqttSession.MqttSessionVirtualRouter(rawValue: (sourceDictionary["mqttSessionVirtualRouter"] as? String) ?? "") 
                instance.msgVpnName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["msgVpnName"])
                instance.owner = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["owner"])
                return instance
            }


            // Decoder for [MsgVpnMqttSessionLinks]
            Decoders.addDecoder(clazz: [MsgVpnMqttSessionLinks].self) { (source: AnyObject) -> [MsgVpnMqttSessionLinks] in
                return Decoders.decode(clazz: [MsgVpnMqttSessionLinks].self, source: source)
            }
            // Decoder for MsgVpnMqttSessionLinks
            Decoders.addDecoder(clazz: MsgVpnMqttSessionLinks.self) { (source: AnyObject) -> MsgVpnMqttSessionLinks in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnMqttSessionLinks()
                instance.subscriptionsUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["subscriptionsUri"])
                instance.uri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["uri"])
                return instance
            }


            // Decoder for [MsgVpnMqttSessionResponse]
            Decoders.addDecoder(clazz: [MsgVpnMqttSessionResponse].self) { (source: AnyObject) -> [MsgVpnMqttSessionResponse] in
                return Decoders.decode(clazz: [MsgVpnMqttSessionResponse].self, source: source)
            }
            // Decoder for MsgVpnMqttSessionResponse
            Decoders.addDecoder(clazz: MsgVpnMqttSessionResponse.self) { (source: AnyObject) -> MsgVpnMqttSessionResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnMqttSessionResponse()
                instance.data = Decoders.decodeOptional(clazz: MsgVpnMqttSession.self, source: sourceDictionary["data"])
                instance.links = Decoders.decodeOptional(clazz: MsgVpnMqttSessionLinks.self, source: sourceDictionary["links"])
                instance.meta = Decoders.decodeOptional(clazz: SempMeta.self, source: sourceDictionary["meta"])
                return instance
            }


            // Decoder for [MsgVpnMqttSessionSubscription]
            Decoders.addDecoder(clazz: [MsgVpnMqttSessionSubscription].self) { (source: AnyObject) -> [MsgVpnMqttSessionSubscription] in
                return Decoders.decode(clazz: [MsgVpnMqttSessionSubscription].self, source: source)
            }
            // Decoder for MsgVpnMqttSessionSubscription
            Decoders.addDecoder(clazz: MsgVpnMqttSessionSubscription.self) { (source: AnyObject) -> MsgVpnMqttSessionSubscription in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnMqttSessionSubscription()
                instance.mqttSessionClientId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["mqttSessionClientId"])
                instance.mqttSessionVirtualRouter = MsgVpnMqttSessionSubscription.MqttSessionVirtualRouter(rawValue: (sourceDictionary["mqttSessionVirtualRouter"] as? String) ?? "") 
                instance.msgVpnName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["msgVpnName"])
                instance.subscriptionQos = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["subscriptionQos"])
                instance.subscriptionTopic = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["subscriptionTopic"])
                return instance
            }


            // Decoder for [MsgVpnMqttSessionSubscriptionLinks]
            Decoders.addDecoder(clazz: [MsgVpnMqttSessionSubscriptionLinks].self) { (source: AnyObject) -> [MsgVpnMqttSessionSubscriptionLinks] in
                return Decoders.decode(clazz: [MsgVpnMqttSessionSubscriptionLinks].self, source: source)
            }
            // Decoder for MsgVpnMqttSessionSubscriptionLinks
            Decoders.addDecoder(clazz: MsgVpnMqttSessionSubscriptionLinks.self) { (source: AnyObject) -> MsgVpnMqttSessionSubscriptionLinks in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnMqttSessionSubscriptionLinks()
                instance.uri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["uri"])
                return instance
            }


            // Decoder for [MsgVpnMqttSessionSubscriptionResponse]
            Decoders.addDecoder(clazz: [MsgVpnMqttSessionSubscriptionResponse].self) { (source: AnyObject) -> [MsgVpnMqttSessionSubscriptionResponse] in
                return Decoders.decode(clazz: [MsgVpnMqttSessionSubscriptionResponse].self, source: source)
            }
            // Decoder for MsgVpnMqttSessionSubscriptionResponse
            Decoders.addDecoder(clazz: MsgVpnMqttSessionSubscriptionResponse.self) { (source: AnyObject) -> MsgVpnMqttSessionSubscriptionResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnMqttSessionSubscriptionResponse()
                instance.data = Decoders.decodeOptional(clazz: MsgVpnMqttSessionSubscription.self, source: sourceDictionary["data"])
                instance.links = Decoders.decodeOptional(clazz: MsgVpnMqttSessionSubscriptionLinks.self, source: sourceDictionary["links"])
                instance.meta = Decoders.decodeOptional(clazz: SempMeta.self, source: sourceDictionary["meta"])
                return instance
            }


            // Decoder for [MsgVpnMqttSessionSubscriptionsResponse]
            Decoders.addDecoder(clazz: [MsgVpnMqttSessionSubscriptionsResponse].self) { (source: AnyObject) -> [MsgVpnMqttSessionSubscriptionsResponse] in
                return Decoders.decode(clazz: [MsgVpnMqttSessionSubscriptionsResponse].self, source: source)
            }
            // Decoder for MsgVpnMqttSessionSubscriptionsResponse
            Decoders.addDecoder(clazz: MsgVpnMqttSessionSubscriptionsResponse.self) { (source: AnyObject) -> MsgVpnMqttSessionSubscriptionsResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnMqttSessionSubscriptionsResponse()
                instance.data = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["data"])
                instance.links = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["links"])
                instance.meta = Decoders.decodeOptional(clazz: SempMeta.self, source: sourceDictionary["meta"])
                return instance
            }


            // Decoder for [MsgVpnMqttSessionsResponse]
            Decoders.addDecoder(clazz: [MsgVpnMqttSessionsResponse].self) { (source: AnyObject) -> [MsgVpnMqttSessionsResponse] in
                return Decoders.decode(clazz: [MsgVpnMqttSessionsResponse].self, source: source)
            }
            // Decoder for MsgVpnMqttSessionsResponse
            Decoders.addDecoder(clazz: MsgVpnMqttSessionsResponse.self) { (source: AnyObject) -> MsgVpnMqttSessionsResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnMqttSessionsResponse()
                instance.data = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["data"])
                instance.links = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["links"])
                instance.meta = Decoders.decodeOptional(clazz: SempMeta.self, source: sourceDictionary["meta"])
                return instance
            }


            // Decoder for [MsgVpnQueue]
            Decoders.addDecoder(clazz: [MsgVpnQueue].self) { (source: AnyObject) -> [MsgVpnQueue] in
                return Decoders.decode(clazz: [MsgVpnQueue].self, source: source)
            }
            // Decoder for MsgVpnQueue
            Decoders.addDecoder(clazz: MsgVpnQueue.self) { (source: AnyObject) -> MsgVpnQueue in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnQueue()
                instance.accessType = MsgVpnQueue.AccessType(rawValue: (sourceDictionary["accessType"] as? String) ?? "") 
                instance.consumerAckPropagationEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["consumerAckPropagationEnabled"])
                instance.deadMsgQueue = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["deadMsgQueue"])
                instance.egressEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["egressEnabled"])
                instance.eventBindCountThreshold = Decoders.decodeOptional(clazz: EventThreshold.self, source: sourceDictionary["eventBindCountThreshold"])
                instance.eventMsgSpoolUsageThreshold = Decoders.decodeOptional(clazz: EventThreshold.self, source: sourceDictionary["eventMsgSpoolUsageThreshold"])
                instance.eventRejectLowPriorityMsgLimitThreshold = Decoders.decodeOptional(clazz: EventThreshold.self, source: sourceDictionary["eventRejectLowPriorityMsgLimitThreshold"])
                instance.ingressEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["ingressEnabled"])
                instance.maxBindCount = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["maxBindCount"])
                instance.maxDeliveredUnackedMsgsPerFlow = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["maxDeliveredUnackedMsgsPerFlow"])
                instance.maxMsgSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["maxMsgSize"])
                instance.maxMsgSpoolUsage = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["maxMsgSpoolUsage"])
                instance.maxRedeliveryCount = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["maxRedeliveryCount"])
                instance.maxTtl = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["maxTtl"])
                instance.msgVpnName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["msgVpnName"])
                instance.owner = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["owner"])
                instance.permission = MsgVpnQueue.Permission(rawValue: (sourceDictionary["permission"] as? String) ?? "") 
                instance.queueName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["queueName"])
                instance.rejectLowPriorityMsgEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["rejectLowPriorityMsgEnabled"])
                instance.rejectLowPriorityMsgLimit = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["rejectLowPriorityMsgLimit"])
                instance.rejectMsgToSenderOnDiscardBehavior = MsgVpnQueue.RejectMsgToSenderOnDiscardBehavior(rawValue: (sourceDictionary["rejectMsgToSenderOnDiscardBehavior"] as? String) ?? "") 
                instance.respectMsgPriorityEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["respectMsgPriorityEnabled"])
                instance.respectTtlEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["respectTtlEnabled"])
                return instance
            }


            // Decoder for [MsgVpnQueueLinks]
            Decoders.addDecoder(clazz: [MsgVpnQueueLinks].self) { (source: AnyObject) -> [MsgVpnQueueLinks] in
                return Decoders.decode(clazz: [MsgVpnQueueLinks].self, source: source)
            }
            // Decoder for MsgVpnQueueLinks
            Decoders.addDecoder(clazz: MsgVpnQueueLinks.self) { (source: AnyObject) -> MsgVpnQueueLinks in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnQueueLinks()
                instance.subscriptionsUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["subscriptionsUri"])
                instance.uri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["uri"])
                return instance
            }


            // Decoder for [MsgVpnQueueResponse]
            Decoders.addDecoder(clazz: [MsgVpnQueueResponse].self) { (source: AnyObject) -> [MsgVpnQueueResponse] in
                return Decoders.decode(clazz: [MsgVpnQueueResponse].self, source: source)
            }
            // Decoder for MsgVpnQueueResponse
            Decoders.addDecoder(clazz: MsgVpnQueueResponse.self) { (source: AnyObject) -> MsgVpnQueueResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnQueueResponse()
                instance.data = Decoders.decodeOptional(clazz: MsgVpnQueue.self, source: sourceDictionary["data"])
                instance.links = Decoders.decodeOptional(clazz: MsgVpnQueueLinks.self, source: sourceDictionary["links"])
                instance.meta = Decoders.decodeOptional(clazz: SempMeta.self, source: sourceDictionary["meta"])
                return instance
            }


            // Decoder for [MsgVpnQueueSubscription]
            Decoders.addDecoder(clazz: [MsgVpnQueueSubscription].self) { (source: AnyObject) -> [MsgVpnQueueSubscription] in
                return Decoders.decode(clazz: [MsgVpnQueueSubscription].self, source: source)
            }
            // Decoder for MsgVpnQueueSubscription
            Decoders.addDecoder(clazz: MsgVpnQueueSubscription.self) { (source: AnyObject) -> MsgVpnQueueSubscription in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnQueueSubscription()
                instance.msgVpnName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["msgVpnName"])
                instance.queueName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["queueName"])
                instance.subscriptionTopic = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["subscriptionTopic"])
                return instance
            }


            // Decoder for [MsgVpnQueueSubscriptionLinks]
            Decoders.addDecoder(clazz: [MsgVpnQueueSubscriptionLinks].self) { (source: AnyObject) -> [MsgVpnQueueSubscriptionLinks] in
                return Decoders.decode(clazz: [MsgVpnQueueSubscriptionLinks].self, source: source)
            }
            // Decoder for MsgVpnQueueSubscriptionLinks
            Decoders.addDecoder(clazz: MsgVpnQueueSubscriptionLinks.self) { (source: AnyObject) -> MsgVpnQueueSubscriptionLinks in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnQueueSubscriptionLinks()
                instance.uri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["uri"])
                return instance
            }


            // Decoder for [MsgVpnQueueSubscriptionResponse]
            Decoders.addDecoder(clazz: [MsgVpnQueueSubscriptionResponse].self) { (source: AnyObject) -> [MsgVpnQueueSubscriptionResponse] in
                return Decoders.decode(clazz: [MsgVpnQueueSubscriptionResponse].self, source: source)
            }
            // Decoder for MsgVpnQueueSubscriptionResponse
            Decoders.addDecoder(clazz: MsgVpnQueueSubscriptionResponse.self) { (source: AnyObject) -> MsgVpnQueueSubscriptionResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnQueueSubscriptionResponse()
                instance.data = Decoders.decodeOptional(clazz: MsgVpnQueueSubscription.self, source: sourceDictionary["data"])
                instance.links = Decoders.decodeOptional(clazz: MsgVpnQueueSubscriptionLinks.self, source: sourceDictionary["links"])
                instance.meta = Decoders.decodeOptional(clazz: SempMeta.self, source: sourceDictionary["meta"])
                return instance
            }


            // Decoder for [MsgVpnQueueSubscriptionsResponse]
            Decoders.addDecoder(clazz: [MsgVpnQueueSubscriptionsResponse].self) { (source: AnyObject) -> [MsgVpnQueueSubscriptionsResponse] in
                return Decoders.decode(clazz: [MsgVpnQueueSubscriptionsResponse].self, source: source)
            }
            // Decoder for MsgVpnQueueSubscriptionsResponse
            Decoders.addDecoder(clazz: MsgVpnQueueSubscriptionsResponse.self) { (source: AnyObject) -> MsgVpnQueueSubscriptionsResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnQueueSubscriptionsResponse()
                instance.data = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["data"])
                instance.links = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["links"])
                instance.meta = Decoders.decodeOptional(clazz: SempMeta.self, source: sourceDictionary["meta"])
                return instance
            }


            // Decoder for [MsgVpnQueuesResponse]
            Decoders.addDecoder(clazz: [MsgVpnQueuesResponse].self) { (source: AnyObject) -> [MsgVpnQueuesResponse] in
                return Decoders.decode(clazz: [MsgVpnQueuesResponse].self, source: source)
            }
            // Decoder for MsgVpnQueuesResponse
            Decoders.addDecoder(clazz: MsgVpnQueuesResponse.self) { (source: AnyObject) -> MsgVpnQueuesResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnQueuesResponse()
                instance.data = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["data"])
                instance.links = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["links"])
                instance.meta = Decoders.decodeOptional(clazz: SempMeta.self, source: sourceDictionary["meta"])
                return instance
            }


            // Decoder for [MsgVpnReplayLog]
            Decoders.addDecoder(clazz: [MsgVpnReplayLog].self) { (source: AnyObject) -> [MsgVpnReplayLog] in
                return Decoders.decode(clazz: [MsgVpnReplayLog].self, source: source)
            }
            // Decoder for MsgVpnReplayLog
            Decoders.addDecoder(clazz: MsgVpnReplayLog.self) { (source: AnyObject) -> MsgVpnReplayLog in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnReplayLog()
                instance.egressEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["egressEnabled"])
                instance.ingressEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["ingressEnabled"])
                instance.maxSpoolUsage = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["maxSpoolUsage"])
                instance.msgVpnName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["msgVpnName"])
                instance.replayLogName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["replayLogName"])
                return instance
            }


            // Decoder for [MsgVpnReplayLogLinks]
            Decoders.addDecoder(clazz: [MsgVpnReplayLogLinks].self) { (source: AnyObject) -> [MsgVpnReplayLogLinks] in
                return Decoders.decode(clazz: [MsgVpnReplayLogLinks].self, source: source)
            }
            // Decoder for MsgVpnReplayLogLinks
            Decoders.addDecoder(clazz: MsgVpnReplayLogLinks.self) { (source: AnyObject) -> MsgVpnReplayLogLinks in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnReplayLogLinks()
                instance.uri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["uri"])
                return instance
            }


            // Decoder for [MsgVpnReplayLogResponse]
            Decoders.addDecoder(clazz: [MsgVpnReplayLogResponse].self) { (source: AnyObject) -> [MsgVpnReplayLogResponse] in
                return Decoders.decode(clazz: [MsgVpnReplayLogResponse].self, source: source)
            }
            // Decoder for MsgVpnReplayLogResponse
            Decoders.addDecoder(clazz: MsgVpnReplayLogResponse.self) { (source: AnyObject) -> MsgVpnReplayLogResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnReplayLogResponse()
                instance.data = Decoders.decodeOptional(clazz: MsgVpnReplayLog.self, source: sourceDictionary["data"])
                instance.links = Decoders.decodeOptional(clazz: MsgVpnReplayLogLinks.self, source: sourceDictionary["links"])
                instance.meta = Decoders.decodeOptional(clazz: SempMeta.self, source: sourceDictionary["meta"])
                return instance
            }


            // Decoder for [MsgVpnReplayLogsResponse]
            Decoders.addDecoder(clazz: [MsgVpnReplayLogsResponse].self) { (source: AnyObject) -> [MsgVpnReplayLogsResponse] in
                return Decoders.decode(clazz: [MsgVpnReplayLogsResponse].self, source: source)
            }
            // Decoder for MsgVpnReplayLogsResponse
            Decoders.addDecoder(clazz: MsgVpnReplayLogsResponse.self) { (source: AnyObject) -> MsgVpnReplayLogsResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnReplayLogsResponse()
                instance.data = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["data"])
                instance.links = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["links"])
                instance.meta = Decoders.decodeOptional(clazz: SempMeta.self, source: sourceDictionary["meta"])
                return instance
            }


            // Decoder for [MsgVpnReplicatedTopic]
            Decoders.addDecoder(clazz: [MsgVpnReplicatedTopic].self) { (source: AnyObject) -> [MsgVpnReplicatedTopic] in
                return Decoders.decode(clazz: [MsgVpnReplicatedTopic].self, source: source)
            }
            // Decoder for MsgVpnReplicatedTopic
            Decoders.addDecoder(clazz: MsgVpnReplicatedTopic.self) { (source: AnyObject) -> MsgVpnReplicatedTopic in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnReplicatedTopic()
                instance.msgVpnName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["msgVpnName"])
                instance.replicatedTopic = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["replicatedTopic"])
                instance.replicationMode = MsgVpnReplicatedTopic.ReplicationMode(rawValue: (sourceDictionary["replicationMode"] as? String) ?? "") 
                return instance
            }


            // Decoder for [MsgVpnReplicatedTopicLinks]
            Decoders.addDecoder(clazz: [MsgVpnReplicatedTopicLinks].self) { (source: AnyObject) -> [MsgVpnReplicatedTopicLinks] in
                return Decoders.decode(clazz: [MsgVpnReplicatedTopicLinks].self, source: source)
            }
            // Decoder for MsgVpnReplicatedTopicLinks
            Decoders.addDecoder(clazz: MsgVpnReplicatedTopicLinks.self) { (source: AnyObject) -> MsgVpnReplicatedTopicLinks in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnReplicatedTopicLinks()
                instance.uri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["uri"])
                return instance
            }


            // Decoder for [MsgVpnReplicatedTopicResponse]
            Decoders.addDecoder(clazz: [MsgVpnReplicatedTopicResponse].self) { (source: AnyObject) -> [MsgVpnReplicatedTopicResponse] in
                return Decoders.decode(clazz: [MsgVpnReplicatedTopicResponse].self, source: source)
            }
            // Decoder for MsgVpnReplicatedTopicResponse
            Decoders.addDecoder(clazz: MsgVpnReplicatedTopicResponse.self) { (source: AnyObject) -> MsgVpnReplicatedTopicResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnReplicatedTopicResponse()
                instance.data = Decoders.decodeOptional(clazz: MsgVpnReplicatedTopic.self, source: sourceDictionary["data"])
                instance.links = Decoders.decodeOptional(clazz: MsgVpnReplicatedTopicLinks.self, source: sourceDictionary["links"])
                instance.meta = Decoders.decodeOptional(clazz: SempMeta.self, source: sourceDictionary["meta"])
                return instance
            }


            // Decoder for [MsgVpnReplicatedTopicsResponse]
            Decoders.addDecoder(clazz: [MsgVpnReplicatedTopicsResponse].self) { (source: AnyObject) -> [MsgVpnReplicatedTopicsResponse] in
                return Decoders.decode(clazz: [MsgVpnReplicatedTopicsResponse].self, source: source)
            }
            // Decoder for MsgVpnReplicatedTopicsResponse
            Decoders.addDecoder(clazz: MsgVpnReplicatedTopicsResponse.self) { (source: AnyObject) -> MsgVpnReplicatedTopicsResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnReplicatedTopicsResponse()
                instance.data = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["data"])
                instance.links = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["links"])
                instance.meta = Decoders.decodeOptional(clazz: SempMeta.self, source: sourceDictionary["meta"])
                return instance
            }


            // Decoder for [MsgVpnResponse]
            Decoders.addDecoder(clazz: [MsgVpnResponse].self) { (source: AnyObject) -> [MsgVpnResponse] in
                return Decoders.decode(clazz: [MsgVpnResponse].self, source: source)
            }
            // Decoder for MsgVpnResponse
            Decoders.addDecoder(clazz: MsgVpnResponse.self) { (source: AnyObject) -> MsgVpnResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnResponse()
                instance.data = Decoders.decodeOptional(clazz: MsgVpn.self, source: sourceDictionary["data"])
                instance.links = Decoders.decodeOptional(clazz: MsgVpnLinks.self, source: sourceDictionary["links"])
                instance.meta = Decoders.decodeOptional(clazz: SempMeta.self, source: sourceDictionary["meta"])
                return instance
            }


            // Decoder for [MsgVpnRestDeliveryPoint]
            Decoders.addDecoder(clazz: [MsgVpnRestDeliveryPoint].self) { (source: AnyObject) -> [MsgVpnRestDeliveryPoint] in
                return Decoders.decode(clazz: [MsgVpnRestDeliveryPoint].self, source: source)
            }
            // Decoder for MsgVpnRestDeliveryPoint
            Decoders.addDecoder(clazz: MsgVpnRestDeliveryPoint.self) { (source: AnyObject) -> MsgVpnRestDeliveryPoint in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnRestDeliveryPoint()
                instance.clientProfileName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["clientProfileName"])
                instance.enabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["enabled"])
                instance.msgVpnName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["msgVpnName"])
                instance.restDeliveryPointName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["restDeliveryPointName"])
                return instance
            }


            // Decoder for [MsgVpnRestDeliveryPointLinks]
            Decoders.addDecoder(clazz: [MsgVpnRestDeliveryPointLinks].self) { (source: AnyObject) -> [MsgVpnRestDeliveryPointLinks] in
                return Decoders.decode(clazz: [MsgVpnRestDeliveryPointLinks].self, source: source)
            }
            // Decoder for MsgVpnRestDeliveryPointLinks
            Decoders.addDecoder(clazz: MsgVpnRestDeliveryPointLinks.self) { (source: AnyObject) -> MsgVpnRestDeliveryPointLinks in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnRestDeliveryPointLinks()
                instance.queueBindingsUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["queueBindingsUri"])
                instance.restConsumersUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["restConsumersUri"])
                instance.uri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["uri"])
                return instance
            }


            // Decoder for [MsgVpnRestDeliveryPointQueueBinding]
            Decoders.addDecoder(clazz: [MsgVpnRestDeliveryPointQueueBinding].self) { (source: AnyObject) -> [MsgVpnRestDeliveryPointQueueBinding] in
                return Decoders.decode(clazz: [MsgVpnRestDeliveryPointQueueBinding].self, source: source)
            }
            // Decoder for MsgVpnRestDeliveryPointQueueBinding
            Decoders.addDecoder(clazz: MsgVpnRestDeliveryPointQueueBinding.self) { (source: AnyObject) -> MsgVpnRestDeliveryPointQueueBinding in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnRestDeliveryPointQueueBinding()
                instance.gatewayReplaceTargetAuthorityEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["gatewayReplaceTargetAuthorityEnabled"])
                instance.msgVpnName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["msgVpnName"])
                instance.postRequestTarget = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["postRequestTarget"])
                instance.queueBindingName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["queueBindingName"])
                instance.restDeliveryPointName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["restDeliveryPointName"])
                return instance
            }


            // Decoder for [MsgVpnRestDeliveryPointQueueBindingLinks]
            Decoders.addDecoder(clazz: [MsgVpnRestDeliveryPointQueueBindingLinks].self) { (source: AnyObject) -> [MsgVpnRestDeliveryPointQueueBindingLinks] in
                return Decoders.decode(clazz: [MsgVpnRestDeliveryPointQueueBindingLinks].self, source: source)
            }
            // Decoder for MsgVpnRestDeliveryPointQueueBindingLinks
            Decoders.addDecoder(clazz: MsgVpnRestDeliveryPointQueueBindingLinks.self) { (source: AnyObject) -> MsgVpnRestDeliveryPointQueueBindingLinks in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnRestDeliveryPointQueueBindingLinks()
                instance.uri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["uri"])
                return instance
            }


            // Decoder for [MsgVpnRestDeliveryPointQueueBindingResponse]
            Decoders.addDecoder(clazz: [MsgVpnRestDeliveryPointQueueBindingResponse].self) { (source: AnyObject) -> [MsgVpnRestDeliveryPointQueueBindingResponse] in
                return Decoders.decode(clazz: [MsgVpnRestDeliveryPointQueueBindingResponse].self, source: source)
            }
            // Decoder for MsgVpnRestDeliveryPointQueueBindingResponse
            Decoders.addDecoder(clazz: MsgVpnRestDeliveryPointQueueBindingResponse.self) { (source: AnyObject) -> MsgVpnRestDeliveryPointQueueBindingResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnRestDeliveryPointQueueBindingResponse()
                instance.data = Decoders.decodeOptional(clazz: MsgVpnRestDeliveryPointQueueBinding.self, source: sourceDictionary["data"])
                instance.links = Decoders.decodeOptional(clazz: MsgVpnRestDeliveryPointQueueBindingLinks.self, source: sourceDictionary["links"])
                instance.meta = Decoders.decodeOptional(clazz: SempMeta.self, source: sourceDictionary["meta"])
                return instance
            }


            // Decoder for [MsgVpnRestDeliveryPointQueueBindingsResponse]
            Decoders.addDecoder(clazz: [MsgVpnRestDeliveryPointQueueBindingsResponse].self) { (source: AnyObject) -> [MsgVpnRestDeliveryPointQueueBindingsResponse] in
                return Decoders.decode(clazz: [MsgVpnRestDeliveryPointQueueBindingsResponse].self, source: source)
            }
            // Decoder for MsgVpnRestDeliveryPointQueueBindingsResponse
            Decoders.addDecoder(clazz: MsgVpnRestDeliveryPointQueueBindingsResponse.self) { (source: AnyObject) -> MsgVpnRestDeliveryPointQueueBindingsResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnRestDeliveryPointQueueBindingsResponse()
                instance.data = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["data"])
                instance.links = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["links"])
                instance.meta = Decoders.decodeOptional(clazz: SempMeta.self, source: sourceDictionary["meta"])
                return instance
            }


            // Decoder for [MsgVpnRestDeliveryPointResponse]
            Decoders.addDecoder(clazz: [MsgVpnRestDeliveryPointResponse].self) { (source: AnyObject) -> [MsgVpnRestDeliveryPointResponse] in
                return Decoders.decode(clazz: [MsgVpnRestDeliveryPointResponse].self, source: source)
            }
            // Decoder for MsgVpnRestDeliveryPointResponse
            Decoders.addDecoder(clazz: MsgVpnRestDeliveryPointResponse.self) { (source: AnyObject) -> MsgVpnRestDeliveryPointResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnRestDeliveryPointResponse()
                instance.data = Decoders.decodeOptional(clazz: MsgVpnRestDeliveryPoint.self, source: sourceDictionary["data"])
                instance.links = Decoders.decodeOptional(clazz: MsgVpnRestDeliveryPointLinks.self, source: sourceDictionary["links"])
                instance.meta = Decoders.decodeOptional(clazz: SempMeta.self, source: sourceDictionary["meta"])
                return instance
            }


            // Decoder for [MsgVpnRestDeliveryPointRestConsumer]
            Decoders.addDecoder(clazz: [MsgVpnRestDeliveryPointRestConsumer].self) { (source: AnyObject) -> [MsgVpnRestDeliveryPointRestConsumer] in
                return Decoders.decode(clazz: [MsgVpnRestDeliveryPointRestConsumer].self, source: source)
            }
            // Decoder for MsgVpnRestDeliveryPointRestConsumer
            Decoders.addDecoder(clazz: MsgVpnRestDeliveryPointRestConsumer.self) { (source: AnyObject) -> MsgVpnRestDeliveryPointRestConsumer in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnRestDeliveryPointRestConsumer()
                instance.authenticationClientCertContent = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["authenticationClientCertContent"])
                instance.authenticationClientCertPassword = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["authenticationClientCertPassword"])
                instance.authenticationHttpBasicPassword = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["authenticationHttpBasicPassword"])
                instance.authenticationHttpBasicUsername = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["authenticationHttpBasicUsername"])
                instance.authenticationScheme = MsgVpnRestDeliveryPointRestConsumer.AuthenticationScheme(rawValue: (sourceDictionary["authenticationScheme"] as? String) ?? "") 
                instance.enabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["enabled"])
                instance.localInterface = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["localInterface"])
                instance.maxPostWaitTime = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["maxPostWaitTime"])
                instance.msgVpnName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["msgVpnName"])
                instance.outgoingConnectionCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["outgoingConnectionCount"])
                instance.remoteHost = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["remoteHost"])
                instance.remotePort = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["remotePort"])
                instance.restConsumerName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["restConsumerName"])
                instance.restDeliveryPointName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["restDeliveryPointName"])
                instance.retryDelay = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["retryDelay"])
                instance.tlsCipherSuiteList = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["tlsCipherSuiteList"])
                instance.tlsEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["tlsEnabled"])
                return instance
            }


            // Decoder for [MsgVpnRestDeliveryPointRestConsumerLinks]
            Decoders.addDecoder(clazz: [MsgVpnRestDeliveryPointRestConsumerLinks].self) { (source: AnyObject) -> [MsgVpnRestDeliveryPointRestConsumerLinks] in
                return Decoders.decode(clazz: [MsgVpnRestDeliveryPointRestConsumerLinks].self, source: source)
            }
            // Decoder for MsgVpnRestDeliveryPointRestConsumerLinks
            Decoders.addDecoder(clazz: MsgVpnRestDeliveryPointRestConsumerLinks.self) { (source: AnyObject) -> MsgVpnRestDeliveryPointRestConsumerLinks in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnRestDeliveryPointRestConsumerLinks()
                instance.tlsTrustedCommonNamesUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["tlsTrustedCommonNamesUri"])
                instance.uri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["uri"])
                return instance
            }


            // Decoder for [MsgVpnRestDeliveryPointRestConsumerResponse]
            Decoders.addDecoder(clazz: [MsgVpnRestDeliveryPointRestConsumerResponse].self) { (source: AnyObject) -> [MsgVpnRestDeliveryPointRestConsumerResponse] in
                return Decoders.decode(clazz: [MsgVpnRestDeliveryPointRestConsumerResponse].self, source: source)
            }
            // Decoder for MsgVpnRestDeliveryPointRestConsumerResponse
            Decoders.addDecoder(clazz: MsgVpnRestDeliveryPointRestConsumerResponse.self) { (source: AnyObject) -> MsgVpnRestDeliveryPointRestConsumerResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnRestDeliveryPointRestConsumerResponse()
                instance.data = Decoders.decodeOptional(clazz: MsgVpnRestDeliveryPointRestConsumer.self, source: sourceDictionary["data"])
                instance.links = Decoders.decodeOptional(clazz: MsgVpnRestDeliveryPointRestConsumerLinks.self, source: sourceDictionary["links"])
                instance.meta = Decoders.decodeOptional(clazz: SempMeta.self, source: sourceDictionary["meta"])
                return instance
            }


            // Decoder for [MsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonName]
            Decoders.addDecoder(clazz: [MsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonName].self) { (source: AnyObject) -> [MsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonName] in
                return Decoders.decode(clazz: [MsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonName].self, source: source)
            }
            // Decoder for MsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonName
            Decoders.addDecoder(clazz: MsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonName.self) { (source: AnyObject) -> MsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonName in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonName()
                instance.msgVpnName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["msgVpnName"])
                instance.restConsumerName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["restConsumerName"])
                instance.restDeliveryPointName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["restDeliveryPointName"])
                instance.tlsTrustedCommonName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["tlsTrustedCommonName"])
                return instance
            }


            // Decoder for [MsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameLinks]
            Decoders.addDecoder(clazz: [MsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameLinks].self) { (source: AnyObject) -> [MsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameLinks] in
                return Decoders.decode(clazz: [MsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameLinks].self, source: source)
            }
            // Decoder for MsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameLinks
            Decoders.addDecoder(clazz: MsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameLinks.self) { (source: AnyObject) -> MsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameLinks in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameLinks()
                instance.uri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["uri"])
                return instance
            }


            // Decoder for [MsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameResponse]
            Decoders.addDecoder(clazz: [MsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameResponse].self) { (source: AnyObject) -> [MsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameResponse] in
                return Decoders.decode(clazz: [MsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameResponse].self, source: source)
            }
            // Decoder for MsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameResponse
            Decoders.addDecoder(clazz: MsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameResponse.self) { (source: AnyObject) -> MsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameResponse()
                instance.data = Decoders.decodeOptional(clazz: MsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonName.self, source: sourceDictionary["data"])
                instance.links = Decoders.decodeOptional(clazz: MsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameLinks.self, source: sourceDictionary["links"])
                instance.meta = Decoders.decodeOptional(clazz: SempMeta.self, source: sourceDictionary["meta"])
                return instance
            }


            // Decoder for [MsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNamesResponse]
            Decoders.addDecoder(clazz: [MsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNamesResponse].self) { (source: AnyObject) -> [MsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNamesResponse] in
                return Decoders.decode(clazz: [MsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNamesResponse].self, source: source)
            }
            // Decoder for MsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNamesResponse
            Decoders.addDecoder(clazz: MsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNamesResponse.self) { (source: AnyObject) -> MsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNamesResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNamesResponse()
                instance.data = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["data"])
                instance.links = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["links"])
                instance.meta = Decoders.decodeOptional(clazz: SempMeta.self, source: sourceDictionary["meta"])
                return instance
            }


            // Decoder for [MsgVpnRestDeliveryPointRestConsumersResponse]
            Decoders.addDecoder(clazz: [MsgVpnRestDeliveryPointRestConsumersResponse].self) { (source: AnyObject) -> [MsgVpnRestDeliveryPointRestConsumersResponse] in
                return Decoders.decode(clazz: [MsgVpnRestDeliveryPointRestConsumersResponse].self, source: source)
            }
            // Decoder for MsgVpnRestDeliveryPointRestConsumersResponse
            Decoders.addDecoder(clazz: MsgVpnRestDeliveryPointRestConsumersResponse.self) { (source: AnyObject) -> MsgVpnRestDeliveryPointRestConsumersResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnRestDeliveryPointRestConsumersResponse()
                instance.data = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["data"])
                instance.links = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["links"])
                instance.meta = Decoders.decodeOptional(clazz: SempMeta.self, source: sourceDictionary["meta"])
                return instance
            }


            // Decoder for [MsgVpnRestDeliveryPointsResponse]
            Decoders.addDecoder(clazz: [MsgVpnRestDeliveryPointsResponse].self) { (source: AnyObject) -> [MsgVpnRestDeliveryPointsResponse] in
                return Decoders.decode(clazz: [MsgVpnRestDeliveryPointsResponse].self, source: source)
            }
            // Decoder for MsgVpnRestDeliveryPointsResponse
            Decoders.addDecoder(clazz: MsgVpnRestDeliveryPointsResponse.self) { (source: AnyObject) -> MsgVpnRestDeliveryPointsResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnRestDeliveryPointsResponse()
                instance.data = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["data"])
                instance.links = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["links"])
                instance.meta = Decoders.decodeOptional(clazz: SempMeta.self, source: sourceDictionary["meta"])
                return instance
            }


            // Decoder for [MsgVpnSequencedTopic]
            Decoders.addDecoder(clazz: [MsgVpnSequencedTopic].self) { (source: AnyObject) -> [MsgVpnSequencedTopic] in
                return Decoders.decode(clazz: [MsgVpnSequencedTopic].self, source: source)
            }
            // Decoder for MsgVpnSequencedTopic
            Decoders.addDecoder(clazz: MsgVpnSequencedTopic.self) { (source: AnyObject) -> MsgVpnSequencedTopic in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnSequencedTopic()
                instance.msgVpnName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["msgVpnName"])
                instance.sequencedTopic = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sequencedTopic"])
                return instance
            }


            // Decoder for [MsgVpnSequencedTopicLinks]
            Decoders.addDecoder(clazz: [MsgVpnSequencedTopicLinks].self) { (source: AnyObject) -> [MsgVpnSequencedTopicLinks] in
                return Decoders.decode(clazz: [MsgVpnSequencedTopicLinks].self, source: source)
            }
            // Decoder for MsgVpnSequencedTopicLinks
            Decoders.addDecoder(clazz: MsgVpnSequencedTopicLinks.self) { (source: AnyObject) -> MsgVpnSequencedTopicLinks in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnSequencedTopicLinks()
                instance.uri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["uri"])
                return instance
            }


            // Decoder for [MsgVpnSequencedTopicResponse]
            Decoders.addDecoder(clazz: [MsgVpnSequencedTopicResponse].self) { (source: AnyObject) -> [MsgVpnSequencedTopicResponse] in
                return Decoders.decode(clazz: [MsgVpnSequencedTopicResponse].self, source: source)
            }
            // Decoder for MsgVpnSequencedTopicResponse
            Decoders.addDecoder(clazz: MsgVpnSequencedTopicResponse.self) { (source: AnyObject) -> MsgVpnSequencedTopicResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnSequencedTopicResponse()
                instance.data = Decoders.decodeOptional(clazz: MsgVpnSequencedTopic.self, source: sourceDictionary["data"])
                instance.links = Decoders.decodeOptional(clazz: MsgVpnSequencedTopicLinks.self, source: sourceDictionary["links"])
                instance.meta = Decoders.decodeOptional(clazz: SempMeta.self, source: sourceDictionary["meta"])
                return instance
            }


            // Decoder for [MsgVpnSequencedTopicsResponse]
            Decoders.addDecoder(clazz: [MsgVpnSequencedTopicsResponse].self) { (source: AnyObject) -> [MsgVpnSequencedTopicsResponse] in
                return Decoders.decode(clazz: [MsgVpnSequencedTopicsResponse].self, source: source)
            }
            // Decoder for MsgVpnSequencedTopicsResponse
            Decoders.addDecoder(clazz: MsgVpnSequencedTopicsResponse.self) { (source: AnyObject) -> MsgVpnSequencedTopicsResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnSequencedTopicsResponse()
                instance.data = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["data"])
                instance.links = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["links"])
                instance.meta = Decoders.decodeOptional(clazz: SempMeta.self, source: sourceDictionary["meta"])
                return instance
            }


            // Decoder for [MsgVpnTopicEndpoint]
            Decoders.addDecoder(clazz: [MsgVpnTopicEndpoint].self) { (source: AnyObject) -> [MsgVpnTopicEndpoint] in
                return Decoders.decode(clazz: [MsgVpnTopicEndpoint].self, source: source)
            }
            // Decoder for MsgVpnTopicEndpoint
            Decoders.addDecoder(clazz: MsgVpnTopicEndpoint.self) { (source: AnyObject) -> MsgVpnTopicEndpoint in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnTopicEndpoint()
                instance.accessType = MsgVpnTopicEndpoint.AccessType(rawValue: (sourceDictionary["accessType"] as? String) ?? "") 
                instance.consumerAckPropagationEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["consumerAckPropagationEnabled"])
                instance.deadMsgQueue = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["deadMsgQueue"])
                instance.egressEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["egressEnabled"])
                instance.eventBindCountThreshold = Decoders.decodeOptional(clazz: EventThreshold.self, source: sourceDictionary["eventBindCountThreshold"])
                instance.eventRejectLowPriorityMsgLimitThreshold = Decoders.decodeOptional(clazz: EventThreshold.self, source: sourceDictionary["eventRejectLowPriorityMsgLimitThreshold"])
                instance.eventSpoolUsageThreshold = Decoders.decodeOptional(clazz: EventThreshold.self, source: sourceDictionary["eventSpoolUsageThreshold"])
                instance.ingressEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["ingressEnabled"])
                instance.maxBindCount = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["maxBindCount"])
                instance.maxDeliveredUnackedMsgsPerFlow = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["maxDeliveredUnackedMsgsPerFlow"])
                instance.maxMsgSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["maxMsgSize"])
                instance.maxRedeliveryCount = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["maxRedeliveryCount"])
                instance.maxSpoolUsage = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["maxSpoolUsage"])
                instance.maxTtl = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["maxTtl"])
                instance.msgVpnName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["msgVpnName"])
                instance.owner = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["owner"])
                instance.permission = MsgVpnTopicEndpoint.Permission(rawValue: (sourceDictionary["permission"] as? String) ?? "") 
                instance.rejectLowPriorityMsgEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["rejectLowPriorityMsgEnabled"])
                instance.rejectLowPriorityMsgLimit = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["rejectLowPriorityMsgLimit"])
                instance.rejectMsgToSenderOnDiscardBehavior = MsgVpnTopicEndpoint.RejectMsgToSenderOnDiscardBehavior(rawValue: (sourceDictionary["rejectMsgToSenderOnDiscardBehavior"] as? String) ?? "") 
                instance.respectMsgPriorityEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["respectMsgPriorityEnabled"])
                instance.respectTtlEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["respectTtlEnabled"])
                instance.topicEndpointName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["topicEndpointName"])
                return instance
            }


            // Decoder for [MsgVpnTopicEndpointLinks]
            Decoders.addDecoder(clazz: [MsgVpnTopicEndpointLinks].self) { (source: AnyObject) -> [MsgVpnTopicEndpointLinks] in
                return Decoders.decode(clazz: [MsgVpnTopicEndpointLinks].self, source: source)
            }
            // Decoder for MsgVpnTopicEndpointLinks
            Decoders.addDecoder(clazz: MsgVpnTopicEndpointLinks.self) { (source: AnyObject) -> MsgVpnTopicEndpointLinks in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnTopicEndpointLinks()
                instance.uri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["uri"])
                return instance
            }


            // Decoder for [MsgVpnTopicEndpointResponse]
            Decoders.addDecoder(clazz: [MsgVpnTopicEndpointResponse].self) { (source: AnyObject) -> [MsgVpnTopicEndpointResponse] in
                return Decoders.decode(clazz: [MsgVpnTopicEndpointResponse].self, source: source)
            }
            // Decoder for MsgVpnTopicEndpointResponse
            Decoders.addDecoder(clazz: MsgVpnTopicEndpointResponse.self) { (source: AnyObject) -> MsgVpnTopicEndpointResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnTopicEndpointResponse()
                instance.data = Decoders.decodeOptional(clazz: MsgVpnTopicEndpoint.self, source: sourceDictionary["data"])
                instance.links = Decoders.decodeOptional(clazz: MsgVpnTopicEndpointLinks.self, source: sourceDictionary["links"])
                instance.meta = Decoders.decodeOptional(clazz: SempMeta.self, source: sourceDictionary["meta"])
                return instance
            }


            // Decoder for [MsgVpnTopicEndpointsResponse]
            Decoders.addDecoder(clazz: [MsgVpnTopicEndpointsResponse].self) { (source: AnyObject) -> [MsgVpnTopicEndpointsResponse] in
                return Decoders.decode(clazz: [MsgVpnTopicEndpointsResponse].self, source: source)
            }
            // Decoder for MsgVpnTopicEndpointsResponse
            Decoders.addDecoder(clazz: MsgVpnTopicEndpointsResponse.self) { (source: AnyObject) -> MsgVpnTopicEndpointsResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnTopicEndpointsResponse()
                instance.data = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["data"])
                instance.links = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["links"])
                instance.meta = Decoders.decodeOptional(clazz: SempMeta.self, source: sourceDictionary["meta"])
                return instance
            }


            // Decoder for [MsgVpnsResponse]
            Decoders.addDecoder(clazz: [MsgVpnsResponse].self) { (source: AnyObject) -> [MsgVpnsResponse] in
                return Decoders.decode(clazz: [MsgVpnsResponse].self, source: source)
            }
            // Decoder for MsgVpnsResponse
            Decoders.addDecoder(clazz: MsgVpnsResponse.self) { (source: AnyObject) -> MsgVpnsResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MsgVpnsResponse()
                instance.data = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["data"])
                instance.links = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["links"])
                instance.meta = Decoders.decodeOptional(clazz: SempMeta.self, source: sourceDictionary["meta"])
                return instance
            }


            // Decoder for [SempError]
            Decoders.addDecoder(clazz: [SempError].self) { (source: AnyObject) -> [SempError] in
                return Decoders.decode(clazz: [SempError].self, source: source)
            }
            // Decoder for SempError
            Decoders.addDecoder(clazz: SempError.self) { (source: AnyObject) -> SempError in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SempError()
                instance.code = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["code"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.status = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["status"])
                return instance
            }


            // Decoder for [SempMeta]
            Decoders.addDecoder(clazz: [SempMeta].self) { (source: AnyObject) -> [SempMeta] in
                return Decoders.decode(clazz: [SempMeta].self, source: source)
            }
            // Decoder for SempMeta
            Decoders.addDecoder(clazz: SempMeta.self) { (source: AnyObject) -> SempMeta in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SempMeta()
                instance.error = Decoders.decodeOptional(clazz: SempError.self, source: sourceDictionary["error"])
                instance.paging = Decoders.decodeOptional(clazz: SempPaging.self, source: sourceDictionary["paging"])
                instance.request = Decoders.decodeOptional(clazz: SempRequest.self, source: sourceDictionary["request"])
                instance.responseCode = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["responseCode"])
                return instance
            }


            // Decoder for [SempMetaOnlyResponse]
            Decoders.addDecoder(clazz: [SempMetaOnlyResponse].self) { (source: AnyObject) -> [SempMetaOnlyResponse] in
                return Decoders.decode(clazz: [SempMetaOnlyResponse].self, source: source)
            }
            // Decoder for SempMetaOnlyResponse
            Decoders.addDecoder(clazz: SempMetaOnlyResponse.self) { (source: AnyObject) -> SempMetaOnlyResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SempMetaOnlyResponse()
                instance.meta = Decoders.decodeOptional(clazz: SempMeta.self, source: sourceDictionary["meta"])
                return instance
            }


            // Decoder for [SempPaging]
            Decoders.addDecoder(clazz: [SempPaging].self) { (source: AnyObject) -> [SempPaging] in
                return Decoders.decode(clazz: [SempPaging].self, source: source)
            }
            // Decoder for SempPaging
            Decoders.addDecoder(clazz: SempPaging.self) { (source: AnyObject) -> SempPaging in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SempPaging()
                instance.cursorQuery = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cursorQuery"])
                instance.nextPageUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextPageUri"])
                return instance
            }


            // Decoder for [SempRequest]
            Decoders.addDecoder(clazz: [SempRequest].self) { (source: AnyObject) -> [SempRequest] in
                return Decoders.decode(clazz: [SempRequest].self, source: source)
            }
            // Decoder for SempRequest
            Decoders.addDecoder(clazz: SempRequest.self) { (source: AnyObject) -> SempRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SempRequest()
                instance.method = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["method"])
                instance.uri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["uri"])
                return instance
            }


            // Decoder for [SystemInformation]
            Decoders.addDecoder(clazz: [SystemInformation].self) { (source: AnyObject) -> [SystemInformation] in
                return Decoders.decode(clazz: [SystemInformation].self, source: source)
            }
            // Decoder for SystemInformation
            Decoders.addDecoder(clazz: SystemInformation.self) { (source: AnyObject) -> SystemInformation in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SystemInformation()
                instance.platform = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["platform"])
                instance.sempVersion = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sempVersion"])
                return instance
            }


            // Decoder for [SystemInformationLinks]
            Decoders.addDecoder(clazz: [SystemInformationLinks].self) { (source: AnyObject) -> [SystemInformationLinks] in
                return Decoders.decode(clazz: [SystemInformationLinks].self, source: source)
            }
            // Decoder for SystemInformationLinks
            Decoders.addDecoder(clazz: SystemInformationLinks.self) { (source: AnyObject) -> SystemInformationLinks in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SystemInformationLinks()
                instance.uri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["uri"])
                return instance
            }


            // Decoder for [SystemInformationResponse]
            Decoders.addDecoder(clazz: [SystemInformationResponse].self) { (source: AnyObject) -> [SystemInformationResponse] in
                return Decoders.decode(clazz: [SystemInformationResponse].self, source: source)
            }
            // Decoder for SystemInformationResponse
            Decoders.addDecoder(clazz: SystemInformationResponse.self) { (source: AnyObject) -> SystemInformationResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SystemInformationResponse()
                instance.data = Decoders.decodeOptional(clazz: SystemInformation.self, source: sourceDictionary["data"])
                instance.links = Decoders.decodeOptional(clazz: SystemInformationLinks.self, source: sourceDictionary["links"])
                instance.meta = Decoders.decodeOptional(clazz: SempMeta.self, source: sourceDictionary["meta"])
                return instance
            }
        }
    }
}
