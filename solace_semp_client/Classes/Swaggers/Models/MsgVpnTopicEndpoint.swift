//
// MsgVpnTopicEndpoint.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


public class MsgVpnTopicEndpoint: JSONEncodable {
    public enum AccessType: String { 
        case Exclusive = "exclusive"
        case NonExclusive = "non-exclusive"
    }
    public enum Permission: String { 
        case NoAccess = "no-access"
        case ReadOnly = "read-only"
        case Consume = "consume"
        case ModifyTopic = "modify-topic"
        case Delete = "delete"
    }
    public enum RejectMsgToSenderOnDiscardBehavior: String { 
        case Always = "always"
        case WhenTopicEndpointEnabled = "when-topic-endpoint-enabled"
        case Never = "never"
    }
    /** The Topic Endpoint access type of either \&quot;exclusive\&quot; or \&quot;non-exclusive\&quot;. The default value is &#x60;\&quot;exclusive\&quot;&#x60;. The allowed values and their meaning are:  &lt;pre&gt; \&quot;exclusive\&quot; - Exclusive delivery of messages to first bound client. \&quot;non-exclusive\&quot; - Non-exclusive delivery of messages to all bound clients. &lt;/pre&gt;  Available since 2.4. */
    public var accessType: AccessType?
    /** Enable or disable the propagation of Consumer ACKs received on the active replication Message VPN to the standby replication Message VPN. The default value is &#x60;true&#x60;. */
    public var consumerAckPropagationEnabled: Bool?
    /** The name of the Dead Message Queue (DMQ) used by the Topic Endpoint. The default value is &#x60;\&quot;#DEAD_MSG_QUEUE\&quot;&#x60;. Available since 2.2. */
    public var deadMsgQueue: String?
    /** Enable or disable the egress flow of messages from the Topic Endpoint. The default value is &#x60;false&#x60;. */
    public var egressEnabled: Bool?
    public var eventBindCountThreshold: EventThreshold?
    public var eventRejectLowPriorityMsgLimitThreshold: EventThreshold?
    public var eventSpoolUsageThreshold: EventThreshold?
    /** Enable or disable the ingress flow of messages to the Topic Endpoint. The default value is &#x60;false&#x60;. */
    public var ingressEnabled: Bool?
    /** The maximum number of simultaneous Consumers of the Topic Endpoint. The default value is &#x60;1&#x60;. Available since 2.4. */
    public var maxBindCount: Int64?
    /** The maximum allowed number of messages delivered but not acknowledged per flow for the Topic Endpoint. The default is the maximum value supported by the hardware. The default value is &#x60;10000&#x60;. */
    public var maxDeliveredUnackedMsgsPerFlow: Int64?
    /** The maximum message size allowed in the Topic Endpoint, in bytes. The default value is &#x60;10000000&#x60;. */
    public var maxMsgSize: Int32?
    /** The maximum number of times the Topic Endpoint will attempt redelivery of a given message prior to it being discarded or moved to the #DEAD_MSG_QUEUE. A value of 0 means to retry forever. The default value is &#x60;0&#x60;. */
    public var maxRedeliveryCount: Int64?
    /** The maximum Message Spool usage by the Topic Endpoint (quota), in megabytes. Setting the value to zero enables the \&quot;last-value-queue\&quot; feature and disables quota checking. The default varies by platform. The default varies by platform. */
    public var maxSpoolUsage: Int64?
    /** The maximum number of seconds that a message can stay in the Topic Endpoint when \&quot;respectTtlEnabled\&quot; is \&quot;true\&quot;. A message will expire according to the lesser of the TTL in the message (assigned by the Publisher) and the \&quot;maxTtl\&quot; configured on the Topic Endpoint. \&quot;maxTtl\&quot; is a 32-bit integer value from 1 to 4294967295 representing the expiry time in seconds. A \&quot;maxTtl\&quot; of \&quot;0\&quot; disables this feature. The default value is &#x60;0&#x60;. */
    public var maxTtl: Int64?
    /** The name of the Message VPN. */
    public var msgVpnName: String?
    /** The Client Username which owns the Topic Endpoint. The default value is &#x60;\&quot;\&quot;&#x60;. */
    public var owner: String?
    /** Permission level for users of the Topic Endpoint, excluding the owner. The default value is &#x60;\&quot;no-access\&quot;&#x60;. The allowed values and their meaning are:  &lt;pre&gt; \&quot;no-access\&quot; - Disallows all access. \&quot;read-only\&quot; - Read-only access to the messages in the Topic Endpoint. \&quot;consume\&quot; - Consume (read and remove) messages in the Topic Endpoint. \&quot;modify-topic\&quot; - Consume messages or modify the topic/selector of the Topic Endpoint. \&quot;delete\&quot; - Consume messages, modify the topic/selector or delete the Topic Endpoint altogether. &lt;/pre&gt;  */
    public var permission: Permission?
    /** Enable or disable if low priority messages are subject to \&quot;rejectLowPriorityMsgLimit\&quot; checking. This may only be enabled if \&quot;rejectMsgToSenderOnDiscardBehavior\&quot; does not have a value of \&quot;never\&quot;. The default value is &#x60;false&#x60;. */
    public var rejectLowPriorityMsgEnabled: Bool?
    /** The number of messages of any priority in the Topic Endpoint above which low priority messages are not admitted but higher priority messages are allowed. The default value is &#x60;0&#x60;. */
    public var rejectLowPriorityMsgLimit: Int64?
    /** The circumstances under which a negative acknowledgement (NACK) is sent to the client on discards. Note that NACKs cause the message to not be delivered to any destination and transacted-session commits to fail. This attribute may only have a value of \&quot;never\&quot; if \&quot;rejectLowPriorityMsgEnabled\&quot; is disabled. The default value is &#x60;\&quot;never\&quot;&#x60;. The allowed values and their meaning are:  &lt;pre&gt; \&quot;always\&quot; - Message discards always result in negative acknowledgments (NACKs) being returned to the sending client, even if the discard reason is that the topic-endpoint is disabled. \&quot;when-topic-endpoint-enabled\&quot; - Message discards result in negative acknowledgments (NACKs) being returned to the sending client, except if the discard reason is that the Topic Endpoint is disabled. \&quot;never\&quot; - Message discards never result in negative acknowledgments (NACKs) being returned to the sending client. &lt;/pre&gt;  */
    public var rejectMsgToSenderOnDiscardBehavior: RejectMsgToSenderOnDiscardBehavior?
    /** Enable or disable the respecting of message priority. If enabled, messages contained in the Topic Endpoint are delivered in priority order, from 9 (highest) to 0 (lowest). The default value is &#x60;false&#x60;. Available since 2.8. */
    public var respectMsgPriorityEnabled: Bool?
    /** Enable or disable the respecting of \&quot;time to live\&quot; (TTL). If enabled, then messages contained in the Topic Endpoint are checked for expiry. If expired, the message is removed from the Topic Endpoint and either discarded or a copy of the message placed in the #DEAD_MSG_QUEUE Endpoint. The default value is &#x60;false&#x60;. */
    public var respectTtlEnabled: Bool?
    /** The name of the Topic Endpoint. */
    public var topicEndpointName: String?

    public init() {}

    // MARK: JSONEncodable
    func encodeToJSON() -> AnyObject {
        var nillableDictionary = [String:AnyObject?]()
        nillableDictionary["accessType"] = self.accessType?.rawValue
        nillableDictionary["consumerAckPropagationEnabled"] = self.consumerAckPropagationEnabled
        nillableDictionary["deadMsgQueue"] = self.deadMsgQueue
        nillableDictionary["egressEnabled"] = self.egressEnabled
        nillableDictionary["eventBindCountThreshold"] = self.eventBindCountThreshold?.encodeToJSON()
        nillableDictionary["eventRejectLowPriorityMsgLimitThreshold"] = self.eventRejectLowPriorityMsgLimitThreshold?.encodeToJSON()
        nillableDictionary["eventSpoolUsageThreshold"] = self.eventSpoolUsageThreshold?.encodeToJSON()
        nillableDictionary["ingressEnabled"] = self.ingressEnabled
        nillableDictionary["maxBindCount"] = self.maxBindCount?.encodeToJSON()
        nillableDictionary["maxDeliveredUnackedMsgsPerFlow"] = self.maxDeliveredUnackedMsgsPerFlow?.encodeToJSON()
        nillableDictionary["maxMsgSize"] = self.maxMsgSize?.encodeToJSON()
        nillableDictionary["maxRedeliveryCount"] = self.maxRedeliveryCount?.encodeToJSON()
        nillableDictionary["maxSpoolUsage"] = self.maxSpoolUsage?.encodeToJSON()
        nillableDictionary["maxTtl"] = self.maxTtl?.encodeToJSON()
        nillableDictionary["msgVpnName"] = self.msgVpnName
        nillableDictionary["owner"] = self.owner
        nillableDictionary["permission"] = self.permission?.rawValue
        nillableDictionary["rejectLowPriorityMsgEnabled"] = self.rejectLowPriorityMsgEnabled
        nillableDictionary["rejectLowPriorityMsgLimit"] = self.rejectLowPriorityMsgLimit?.encodeToJSON()
        nillableDictionary["rejectMsgToSenderOnDiscardBehavior"] = self.rejectMsgToSenderOnDiscardBehavior?.rawValue
        nillableDictionary["respectMsgPriorityEnabled"] = self.respectMsgPriorityEnabled
        nillableDictionary["respectTtlEnabled"] = self.respectTtlEnabled
        nillableDictionary["topicEndpointName"] = self.topicEndpointName
        let dictionary: [String:AnyObject] = APIHelper.rejectNil(nillableDictionary) ?? [:]
        return dictionary
    }
}
